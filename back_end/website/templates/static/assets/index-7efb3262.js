(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function s(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(o){if(o.ep)return;o.ep=!0;const i=s(o);fetch(o.href,i)}})();/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function mn(e,t){const s=new Set(e.split(","));return t?n=>s.has(n.toLowerCase()):n=>s.has(n)}const ee={},Ot=[],$e=()=>{},or=()=>!1,Ts=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),yn=e=>e.startsWith("onUpdate:"),de=Object.assign,vn=(e,t)=>{const s=e.indexOf(t);s>-1&&e.splice(s,1)},ir=Object.prototype.hasOwnProperty,K=(e,t)=>ir.call(e,t),j=Array.isArray,Mt=e=>cs(e)==="[object Map]",Dt=e=>cs(e)==="[object Set]",Hn=e=>cs(e)==="[object Date]",q=e=>typeof e=="function",ie=e=>typeof e=="string",at=e=>typeof e=="symbol",X=e=>e!==null&&typeof e=="object",Do=e=>(X(e)||q(e))&&q(e.then)&&q(e.catch),Bo=Object.prototype.toString,cs=e=>Bo.call(e),rr=e=>cs(e).slice(8,-1),Ko=e=>cs(e)==="[object Object]",wn=e=>ie(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Jt=mn(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Os=e=>{const t=Object.create(null);return s=>t[s]||(t[s]=e(s))},lr=/-(\w)/g,De=Os(e=>e.replace(lr,(t,s)=>s?s.toUpperCase():"")),cr=/\B([A-Z])/g,Et=Os(e=>e.replace(cr,"-$1").toLowerCase()),Ms=Os(e=>e.charAt(0).toUpperCase()+e.slice(1)),Ks=Os(e=>e?`on${Ms(e)}`:""),ut=(e,t)=>!Object.is(e,t),ys=(e,t)=>{for(let s=0;s<e.length;s++)e[s](t)},$s=(e,t,s)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:s})},ts=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Dn;const zo=()=>Dn||(Dn=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function bn(e){if(j(e)){const t={};for(let s=0;s<e.length;s++){const n=e[s],o=ie(n)?fr(n):bn(n);if(o)for(const i in o)t[i]=o[i]}return t}else if(ie(e)||X(e))return e}const ar=/;(?![^(]*\))/g,ur=/:([^]+)/,dr=/\/\*[^]*?\*\//g;function fr(e){const t={};return e.replace(dr,"").split(ar).forEach(s=>{if(s){const n=s.split(ur);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}function He(e){let t="";if(ie(e))t=e;else if(j(e))for(let s=0;s<e.length;s++){const n=He(e[s]);n&&(t+=n+" ")}else if(X(e))for(const s in e)e[s]&&(t+=s+" ");return t.trim()}const hr="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",pr=mn(hr);function Wo(e){return!!e||e===""}function _r(e,t){if(e.length!==t.length)return!1;let s=!0;for(let n=0;s&&n<e.length;n++)s=xt(e[n],t[n]);return s}function xt(e,t){if(e===t)return!0;let s=Hn(e),n=Hn(t);if(s||n)return s&&n?e.getTime()===t.getTime():!1;if(s=at(e),n=at(t),s||n)return e===t;if(s=j(e),n=j(t),s||n)return s&&n?_r(e,t):!1;if(s=X(e),n=X(t),s||n){if(!s||!n)return!1;const o=Object.keys(e).length,i=Object.keys(t).length;if(o!==i)return!1;for(const r in e){const l=e.hasOwnProperty(r),c=t.hasOwnProperty(r);if(l&&!c||!l&&c||!xt(e[r],t[r]))return!1}}return String(e)===String(t)}function xn(e,t){return e.findIndex(s=>xt(s,t))}const Re=e=>ie(e)?e:e==null?"":j(e)||X(e)&&(e.toString===Bo||!q(e.toString))?JSON.stringify(e,Go,2):String(e),Go=(e,t)=>t&&t.__v_isRef?Go(e,t.value):Mt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((s,[n,o],i)=>(s[zs(n,i)+" =>"]=o,s),{})}:Dt(t)?{[`Set(${t.size})`]:[...t.values()].map(s=>zs(s))}:at(t)?zs(t):X(t)&&!j(t)&&!Ko(t)?String(t):t,zs=(e,t="")=>{var s;return at(e)?`Symbol(${(s=e.description)!=null?s:t})`:e};/**
* @vue/reactivity v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Pe;class gr{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Pe,!t&&Pe&&(this.index=(Pe.scopes||(Pe.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const s=Pe;try{return Pe=this,t()}finally{Pe=s}}}on(){Pe=this}off(){Pe=this.parent}stop(t){if(this._active){let s,n;for(s=0,n=this.effects.length;s<n;s++)this.effects[s].stop();for(s=0,n=this.cleanups.length;s<n;s++)this.cleanups[s]();if(this.scopes)for(s=0,n=this.scopes.length;s<n;s++)this.scopes[s].stop(!0);if(!this.detached&&this.parent&&!t){const o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this._active=!1}}}function mr(e,t=Pe){t&&t.active&&t.effects.push(e)}function yr(){return Pe}let vt;class Cn{constructor(t,s,n,o){this.fn=t,this.trigger=s,this.scheduler=n,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,mr(this,o)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,Rt();for(let t=0;t<this._depsLength;t++){const s=this.deps[t];if(s.computed&&(vr(s.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),$t()}return this._dirtyLevel>=4}set dirty(t){this._dirtyLevel=t?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=lt,s=vt;try{return lt=!0,vt=this,this._runnings++,Bn(this),this.fn()}finally{Kn(this),this._runnings--,vt=s,lt=t}}stop(){var t;this.active&&(Bn(this),Kn(this),(t=this.onStop)==null||t.call(this),this.active=!1)}}function vr(e){return e.value}function Bn(e){e._trackId++,e._depsLength=0}function Kn(e){if(e.deps.length>e._depsLength){for(let t=e._depsLength;t<e.deps.length;t++)Jo(e.deps[t],e);e.deps.length=e._depsLength}}function Jo(e,t){const s=e.get(t);s!==void 0&&t._trackId!==s&&(e.delete(t),e.size===0&&e.cleanup())}let lt=!0,tn=0;const Qo=[];function Rt(){Qo.push(lt),lt=!1}function $t(){const e=Qo.pop();lt=e===void 0?!0:e}function En(){tn++}function Rn(){for(tn--;!tn&&sn.length;)sn.shift()()}function Zo(e,t,s){if(t.get(e)!==e._trackId){t.set(e,e._trackId);const n=e.deps[e._depsLength];n!==t?(n&&Jo(n,e),e.deps[e._depsLength++]=t):e._depsLength++}}const sn=[];function Yo(e,t,s){En();for(const n of e.keys()){let o;n._dirtyLevel<t&&(o??(o=e.get(n)===n._trackId))&&(n._shouldSchedule||(n._shouldSchedule=n._dirtyLevel===0),n._dirtyLevel=t),n._shouldSchedule&&(o??(o=e.get(n)===n._trackId))&&(n.trigger(),(!n._runnings||n.allowRecurse)&&n._dirtyLevel!==2&&(n._shouldSchedule=!1,n.scheduler&&sn.push(n.scheduler)))}Rn()}const Xo=(e,t)=>{const s=new Map;return s.cleanup=e,s.computed=t,s},nn=new WeakMap,wt=Symbol(""),on=Symbol("");function xe(e,t,s){if(lt&&vt){let n=nn.get(e);n||nn.set(e,n=new Map);let o=n.get(s);o||n.set(s,o=Xo(()=>n.delete(s))),Zo(vt,o)}}function Je(e,t,s,n,o,i){const r=nn.get(e);if(!r)return;let l=[];if(t==="clear")l=[...r.values()];else if(s==="length"&&j(e)){const c=Number(n);r.forEach((h,f)=>{(f==="length"||!at(f)&&f>=c)&&l.push(h)})}else switch(s!==void 0&&l.push(r.get(s)),t){case"add":j(e)?wn(s)&&l.push(r.get("length")):(l.push(r.get(wt)),Mt(e)&&l.push(r.get(on)));break;case"delete":j(e)||(l.push(r.get(wt)),Mt(e)&&l.push(r.get(on)));break;case"set":Mt(e)&&l.push(r.get(wt));break}En();for(const c of l)c&&Yo(c,4);Rn()}const wr=mn("__proto__,__v_isRef,__isVue"),ei=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(at)),zn=br();function br(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...s){const n=z(this);for(let i=0,r=this.length;i<r;i++)xe(n,"get",i+"");const o=n[t](...s);return o===-1||o===!1?n[t](...s.map(z)):o}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...s){Rt(),En();const n=z(this)[t].apply(this,s);return Rn(),$t(),n}}),e}function xr(e){const t=z(this);return xe(t,"has",e),t.hasOwnProperty(e)}class ti{constructor(t=!1,s=!1){this._isReadonly=t,this._isShallow=s}get(t,s,n){const o=this._isReadonly,i=this._isShallow;if(s==="__v_isReactive")return!o;if(s==="__v_isReadonly")return o;if(s==="__v_isShallow")return i;if(s==="__v_raw")return n===(o?i?jr:ii:i?oi:ni).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(n)?t:void 0;const r=j(t);if(!o){if(r&&K(zn,s))return Reflect.get(zn,s,n);if(s==="hasOwnProperty")return xr}const l=Reflect.get(t,s,n);return(at(s)?ei.has(s):wr(s))||(o||xe(t,"get",s),i)?l:Ce(l)?r&&wn(s)?l:l.value:X(l)?o?li(l):We(l):l}}class si extends ti{constructor(t=!1){super(!1,t)}set(t,s,n,o){let i=t[s];if(!this._isShallow){const c=Vt(i);if(!Ss(n)&&!Vt(n)&&(i=z(i),n=z(n)),!j(t)&&Ce(i)&&!Ce(n))return c?!1:(i.value=n,!0)}const r=j(t)&&wn(s)?Number(s)<t.length:K(t,s),l=Reflect.set(t,s,n,o);return t===z(o)&&(r?ut(n,i)&&Je(t,"set",s,n):Je(t,"add",s,n)),l}deleteProperty(t,s){const n=K(t,s);t[s];const o=Reflect.deleteProperty(t,s);return o&&n&&Je(t,"delete",s,void 0),o}has(t,s){const n=Reflect.has(t,s);return(!at(s)||!ei.has(s))&&xe(t,"has",s),n}ownKeys(t){return xe(t,"iterate",j(t)?"length":wt),Reflect.ownKeys(t)}}class Cr extends ti{constructor(t=!1){super(!0,t)}set(t,s){return!0}deleteProperty(t,s){return!0}}const Er=new si,Rr=new Cr,$r=new si(!0),$n=e=>e,Is=e=>Reflect.getPrototypeOf(e);function ds(e,t,s=!1,n=!1){e=e.__v_raw;const o=z(e),i=z(t);s||(ut(t,i)&&xe(o,"get",t),xe(o,"get",i));const{has:r}=Is(o),l=n?$n:s?An:ss;if(r.call(o,t))return l(e.get(t));if(r.call(o,i))return l(e.get(i));e!==o&&e.get(t)}function fs(e,t=!1){const s=this.__v_raw,n=z(s),o=z(e);return t||(ut(e,o)&&xe(n,"has",e),xe(n,"has",o)),e===o?s.has(e):s.has(e)||s.has(o)}function hs(e,t=!1){return e=e.__v_raw,!t&&xe(z(e),"iterate",wt),Reflect.get(e,"size",e)}function Wn(e){e=z(e);const t=z(this);return Is(t).has.call(t,e)||(t.add(e),Je(t,"add",e,e)),this}function Gn(e,t){t=z(t);const s=z(this),{has:n,get:o}=Is(s);let i=n.call(s,e);i||(e=z(e),i=n.call(s,e));const r=o.call(s,e);return s.set(e,t),i?ut(t,r)&&Je(s,"set",e,t):Je(s,"add",e,t),this}function Jn(e){const t=z(this),{has:s,get:n}=Is(t);let o=s.call(t,e);o||(e=z(e),o=s.call(t,e)),n&&n.call(t,e);const i=t.delete(e);return o&&Je(t,"delete",e,void 0),i}function Qn(){const e=z(this),t=e.size!==0,s=e.clear();return t&&Je(e,"clear",void 0,void 0),s}function ps(e,t){return function(n,o){const i=this,r=i.__v_raw,l=z(r),c=t?$n:e?An:ss;return!e&&xe(l,"iterate",wt),r.forEach((h,f)=>n.call(o,c(h),c(f),i))}}function _s(e,t,s){return function(...n){const o=this.__v_raw,i=z(o),r=Mt(i),l=e==="entries"||e===Symbol.iterator&&r,c=e==="keys"&&r,h=o[e](...n),f=s?$n:t?An:ss;return!t&&xe(i,"iterate",c?on:wt),{next(){const{value:p,done:_}=h.next();return _?{value:p,done:_}:{value:l?[f(p[0]),f(p[1])]:f(p),done:_}},[Symbol.iterator](){return this}}}}function tt(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function Sr(){const e={get(i){return ds(this,i)},get size(){return hs(this)},has:fs,add:Wn,set:Gn,delete:Jn,clear:Qn,forEach:ps(!1,!1)},t={get(i){return ds(this,i,!1,!0)},get size(){return hs(this)},has:fs,add:Wn,set:Gn,delete:Jn,clear:Qn,forEach:ps(!1,!0)},s={get(i){return ds(this,i,!0)},get size(){return hs(this,!0)},has(i){return fs.call(this,i,!0)},add:tt("add"),set:tt("set"),delete:tt("delete"),clear:tt("clear"),forEach:ps(!0,!1)},n={get(i){return ds(this,i,!0,!0)},get size(){return hs(this,!0)},has(i){return fs.call(this,i,!0)},add:tt("add"),set:tt("set"),delete:tt("delete"),clear:tt("clear"),forEach:ps(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(i=>{e[i]=_s(i,!1,!1),s[i]=_s(i,!0,!1),t[i]=_s(i,!1,!0),n[i]=_s(i,!0,!0)}),[e,s,t,n]}const[kr,Ar,Pr,Tr]=Sr();function Sn(e,t){const s=t?e?Tr:Pr:e?Ar:kr;return(n,o,i)=>o==="__v_isReactive"?!e:o==="__v_isReadonly"?e:o==="__v_raw"?n:Reflect.get(K(s,o)&&o in n?s:n,o,i)}const Or={get:Sn(!1,!1)},Mr={get:Sn(!1,!0)},Ir={get:Sn(!0,!1)},ni=new WeakMap,oi=new WeakMap,ii=new WeakMap,jr=new WeakMap;function Lr(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Nr(e){return e.__v_skip||!Object.isExtensible(e)?0:Lr(rr(e))}function We(e){return Vt(e)?e:kn(e,!1,Er,Or,ni)}function ri(e){return kn(e,!1,$r,Mr,oi)}function li(e){return kn(e,!0,Rr,Ir,ii)}function kn(e,t,s,n,o){if(!X(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=o.get(e);if(i)return i;const r=Nr(e);if(r===0)return e;const l=new Proxy(e,r===2?n:s);return o.set(e,l),l}function It(e){return Vt(e)?It(e.__v_raw):!!(e&&e.__v_isReactive)}function Vt(e){return!!(e&&e.__v_isReadonly)}function Ss(e){return!!(e&&e.__v_isShallow)}function ci(e){return It(e)||Vt(e)}function z(e){const t=e&&e.__v_raw;return t?z(t):e}function ai(e){return Object.isExtensible(e)&&$s(e,"__v_skip",!0),e}const ss=e=>X(e)?We(e):e,An=e=>X(e)?li(e):e;class ui{constructor(t,s,n,o){this.getter=t,this._setter=s,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new Cn(()=>t(this._value),()=>vs(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const t=z(this);return(!t._cacheable||t.effect.dirty)&&ut(t._value,t._value=t.effect.run())&&vs(t,4),di(t),t.effect._dirtyLevel>=2&&vs(t,2),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function Vr(e,t,s=!1){let n,o;const i=q(e);return i?(n=e,o=$e):(n=e.get,o=e.set),new ui(n,o,i||!o,s)}function di(e){var t;lt&&vt&&(e=z(e),Zo(vt,(t=e.dep)!=null?t:e.dep=Xo(()=>e.dep=void 0,e instanceof ui?e:void 0)))}function vs(e,t=4,s){e=z(e);const n=e.dep;n&&Yo(n,t)}function Ce(e){return!!(e&&e.__v_isRef===!0)}function qr(e){return fi(e,!1)}function Fr(e){return fi(e,!0)}function fi(e,t){return Ce(e)?e:new Ur(e,t)}class Ur{constructor(t,s){this.__v_isShallow=s,this.dep=void 0,this.__v_isRef=!0,this._rawValue=s?t:z(t),this._value=s?t:ss(t)}get value(){return di(this),this._value}set value(t){const s=this.__v_isShallow||Ss(t)||Vt(t);t=s?t:z(t),ut(t,this._rawValue)&&(this._rawValue=t,this._value=s?t:ss(t),vs(this,4))}}function jt(e){return Ce(e)?e.value:e}const Hr={get:(e,t,s)=>jt(Reflect.get(e,t,s)),set:(e,t,s,n)=>{const o=e[t];return Ce(o)&&!Ce(s)?(o.value=s,!0):Reflect.set(e,t,s,n)}};function hi(e){return It(e)?e:new Proxy(e,Hr)}/**
* @vue/runtime-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function ct(e,t,s,n){try{return n?e(...n):e()}catch(o){js(o,t,s)}}function Me(e,t,s,n){if(q(e)){const i=ct(e,t,s,n);return i&&Do(i)&&i.catch(r=>{js(r,t,s)}),i}const o=[];for(let i=0;i<e.length;i++)o.push(Me(e[i],t,s,n));return o}function js(e,t,s,n=!0){const o=t?t.vnode:null;if(t){let i=t.parent;const r=t.proxy,l=`https://vuejs.org/error-reference/#runtime-${s}`;for(;i;){const h=i.ec;if(h){for(let f=0;f<h.length;f++)if(h[f](e,r,l)===!1)return}i=i.parent}const c=t.appContext.config.errorHandler;if(c){ct(c,null,10,[e,r,l]);return}}Dr(e,s,o,n)}function Dr(e,t,s,n=!0){console.error(e)}let ns=!1,rn=!1;const _e=[];let Ue=0;const Lt=[];let nt=null,gt=0;const pi=Promise.resolve();let Pn=null;function Tn(e){const t=Pn||pi;return e?t.then(this?e.bind(this):e):t}function Br(e){let t=Ue+1,s=_e.length;for(;t<s;){const n=t+s>>>1,o=_e[n],i=os(o);i<e||i===e&&o.pre?t=n+1:s=n}return t}function On(e){(!_e.length||!_e.includes(e,ns&&e.allowRecurse?Ue+1:Ue))&&(e.id==null?_e.push(e):_e.splice(Br(e.id),0,e),_i())}function _i(){!ns&&!rn&&(rn=!0,Pn=pi.then(mi))}function Kr(e){const t=_e.indexOf(e);t>Ue&&_e.splice(t,1)}function zr(e){j(e)?Lt.push(...e):(!nt||!nt.includes(e,e.allowRecurse?gt+1:gt))&&Lt.push(e),_i()}function Zn(e,t,s=ns?Ue+1:0){for(;s<_e.length;s++){const n=_e[s];if(n&&n.pre){if(e&&n.id!==e.uid)continue;_e.splice(s,1),s--,n()}}}function gi(e){if(Lt.length){const t=[...new Set(Lt)].sort((s,n)=>os(s)-os(n));if(Lt.length=0,nt){nt.push(...t);return}for(nt=t,gt=0;gt<nt.length;gt++)nt[gt]();nt=null,gt=0}}const os=e=>e.id==null?1/0:e.id,Wr=(e,t)=>{const s=os(e)-os(t);if(s===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return s};function mi(e){rn=!1,ns=!0,_e.sort(Wr);const t=$e;try{for(Ue=0;Ue<_e.length;Ue++){const s=_e[Ue];s&&s.active!==!1&&ct(s,null,14)}}finally{Ue=0,_e.length=0,gi(),ns=!1,Pn=null,(_e.length||Lt.length)&&mi()}}function Gr(e,t,...s){if(e.isUnmounted)return;const n=e.vnode.props||ee;let o=s;const i=t.startsWith("update:"),r=i&&t.slice(7);if(r&&r in n){const f=`${r==="modelValue"?"model":r}Modifiers`,{number:p,trim:_}=n[f]||ee;_&&(o=s.map(v=>ie(v)?v.trim():v)),p&&(o=s.map(ts))}let l,c=n[l=Ks(t)]||n[l=Ks(De(t))];!c&&i&&(c=n[l=Ks(Et(t))]),c&&Me(c,e,6,o);const h=n[l+"Once"];if(h){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,Me(h,e,6,o)}}function yi(e,t,s=!1){const n=t.emitsCache,o=n.get(e);if(o!==void 0)return o;const i=e.emits;let r={},l=!1;if(!q(e)){const c=h=>{const f=yi(h,t,!0);f&&(l=!0,de(r,f))};!s&&t.mixins.length&&t.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}return!i&&!l?(X(e)&&n.set(e,null),null):(j(i)?i.forEach(c=>r[c]=null):de(r,i),X(e)&&n.set(e,r),r)}function Ls(e,t){return!e||!Ts(t)?!1:(t=t.slice(2).replace(/Once$/,""),K(e,t[0].toLowerCase()+t.slice(1))||K(e,Et(t))||K(e,t))}let be=null,Ns=null;function ks(e){const t=be;return be=e,Ns=e&&e.type.__scopeId||null,t}function vi(e){Ns=e}function wi(){Ns=null}function mt(e,t=be,s){if(!t||e._n)return e;const n=(...o)=>{n._d&&co(-1);const i=ks(t);let r;try{r=e(...o)}finally{ks(i),n._d&&co(1)}return r};return n._n=!0,n._c=!0,n._d=!0,n}function Ws(e){const{type:t,vnode:s,proxy:n,withProxy:o,props:i,propsOptions:[r],slots:l,attrs:c,emit:h,render:f,renderCache:p,data:_,setupState:v,ctx:A,inheritAttrs:I}=e;let V,T;const L=ks(e);try{if(s.shapeFlag&4){const W=o||n,oe=W;V=Fe(f.call(oe,W,p,i,v,_,A)),T=c}else{const W=t;V=Fe(W.length>1?W(i,{attrs:c,slots:l,emit:h}):W(i,null)),T=t.props?c:Jr(c)}}catch(W){Yt.length=0,js(W,e,1),V=ne(Ct)}let F=V;if(T&&I!==!1){const W=Object.keys(T),{shapeFlag:oe}=F;W.length&&oe&7&&(r&&W.some(yn)&&(T=Qr(T,r)),F=qt(F,T))}return s.dirs&&(F=qt(F),F.dirs=F.dirs?F.dirs.concat(s.dirs):s.dirs),s.transition&&(F.transition=s.transition),V=F,ks(L),V}const Jr=e=>{let t;for(const s in e)(s==="class"||s==="style"||Ts(s))&&((t||(t={}))[s]=e[s]);return t},Qr=(e,t)=>{const s={};for(const n in e)(!yn(n)||!(n.slice(9)in t))&&(s[n]=e[n]);return s};function Zr(e,t,s){const{props:n,children:o,component:i}=e,{props:r,children:l,patchFlag:c}=t,h=i.emitsOptions;if(t.dirs||t.transition)return!0;if(s&&c>=0){if(c&1024)return!0;if(c&16)return n?Yn(n,r,h):!!r;if(c&8){const f=t.dynamicProps;for(let p=0;p<f.length;p++){const _=f[p];if(r[_]!==n[_]&&!Ls(h,_))return!0}}}else return(o||l)&&(!l||!l.$stable)?!0:n===r?!1:n?r?Yn(n,r,h):!0:!!r;return!1}function Yn(e,t,s){const n=Object.keys(t);if(n.length!==Object.keys(e).length)return!0;for(let o=0;o<n.length;o++){const i=n[o];if(t[i]!==e[i]&&!Ls(s,i))return!0}return!1}function Yr({vnode:e,parent:t},s){for(;t;){const n=t.subTree;if(n.suspense&&n.suspense.activeBranch===e&&(n.el=e.el),n===e)(e=t.vnode).el=s,t=t.parent;else break}}const bi="components";function bt(e,t){return el(bi,e,!0,t)||e}const Xr=Symbol.for("v-ndc");function el(e,t,s=!0,n=!1){const o=be||ge;if(o){const i=o.type;if(e===bi){const l=Gl(i,!1);if(l&&(l===t||l===De(t)||l===Ms(De(t))))return i}const r=Xn(o[e]||i[e],t)||Xn(o.appContext[e],t);return!r&&n?i:r}}function Xn(e,t){return e&&(e[t]||e[De(t)]||e[Ms(De(t))])}const tl=e=>e.__isSuspense;function sl(e,t){t&&t.pendingBranch?j(e)?t.effects.push(...e):t.effects.push(e):zr(e)}const nl=Symbol.for("v-scx"),ol=()=>Qe(nl),gs={};function ws(e,t,s){return xi(e,t,s)}function xi(e,t,{immediate:s,deep:n,flush:o,once:i,onTrack:r,onTrigger:l}=ee){if(t&&i){const U=t;t=(...me)=>{U(...me),oe()}}const c=ge,h=U=>n===!0?U:yt(U,n===!1?1:void 0);let f,p=!1,_=!1;if(Ce(e)?(f=()=>e.value,p=Ss(e)):It(e)?(f=()=>h(e),p=!0):j(e)?(_=!0,p=e.some(U=>It(U)||Ss(U)),f=()=>e.map(U=>{if(Ce(U))return U.value;if(It(U))return h(U);if(q(U))return ct(U,c,2)})):q(e)?t?f=()=>ct(e,c,2):f=()=>(v&&v(),Me(e,c,3,[A])):f=$e,t&&n){const U=f;f=()=>yt(U())}let v,A=U=>{v=F.onStop=()=>{ct(U,c,4),v=F.onStop=void 0}},I;if(Us)if(A=$e,t?s&&Me(t,c,3,[f(),_?[]:void 0,A]):f(),o==="sync"){const U=ol();I=U.__watcherHandles||(U.__watcherHandles=[])}else return $e;let V=_?new Array(e.length).fill(gs):gs;const T=()=>{if(!(!F.active||!F.dirty))if(t){const U=F.run();(n||p||(_?U.some((me,Se)=>ut(me,V[Se])):ut(U,V)))&&(v&&v(),Me(t,c,3,[U,V===gs?void 0:_&&V[0]===gs?[]:V,A]),V=U)}else F.run()};T.allowRecurse=!!t;let L;o==="sync"?L=T:o==="post"?L=()=>we(T,c&&c.suspense):(T.pre=!0,c&&(T.id=c.uid),L=()=>On(T));const F=new Cn(f,$e,L),W=yr(),oe=()=>{F.stop(),W&&vn(W.effects,F)};return t?s?T():V=F.run():o==="post"?we(F.run.bind(F),c&&c.suspense):F.run(),I&&I.push(oe),oe}function il(e,t,s){const n=this.proxy,o=ie(e)?e.includes(".")?Ci(n,e):()=>n[e]:e.bind(n,n);let i;q(t)?i=t:(i=t.handler,s=t);const r=as(this),l=xi(o,i.bind(n),s);return r(),l}function Ci(e,t){const s=t.split(".");return()=>{let n=e;for(let o=0;o<s.length&&n;o++)n=n[s[o]];return n}}function yt(e,t,s=0,n){if(!X(e)||e.__v_skip)return e;if(t&&t>0){if(s>=t)return e;s++}if(n=n||new Set,n.has(e))return e;if(n.add(e),Ce(e))yt(e.value,t,s,n);else if(j(e))for(let o=0;o<e.length;o++)yt(e[o],t,s,n);else if(Dt(e)||Mt(e))e.forEach(o=>{yt(o,t,s,n)});else if(Ko(e))for(const o in e)yt(e[o],t,s,n);return e}function ae(e,t){if(be===null)return e;const s=Hs(be)||be.proxy,n=e.dirs||(e.dirs=[]);for(let o=0;o<t.length;o++){let[i,r,l,c=ee]=t[o];i&&(q(i)&&(i={mounted:i,updated:i}),i.deep&&yt(r),n.push({dir:i,instance:s,value:r,oldValue:void 0,arg:l,modifiers:c}))}return e}function pt(e,t,s,n){const o=e.dirs,i=t&&t.dirs;for(let r=0;r<o.length;r++){const l=o[r];i&&(l.oldValue=i[r].value);let c=l.dir[n];c&&(Rt(),Me(c,s,8,[e.el,l,e,t]),$t())}}/*! #__NO_SIDE_EFFECTS__ */function Ei(e,t){return q(e)?(()=>de({name:e.name},t,{setup:e}))():e}const bs=e=>!!e.type.__asyncLoader,Ri=e=>e.type.__isKeepAlive;function rl(e,t){$i(e,"a",t)}function ll(e,t){$i(e,"da",t)}function $i(e,t,s=ge){const n=e.__wdc||(e.__wdc=()=>{let o=s;for(;o;){if(o.isDeactivated)return;o=o.parent}return e()});if(Vs(t,n,s),s){let o=s.parent;for(;o&&o.parent;)Ri(o.parent.vnode)&&cl(n,t,s,o),o=o.parent}}function cl(e,t,s,n){const o=Vs(t,e,n,!0);Si(()=>{vn(n[t],o)},s)}function Vs(e,t,s=ge,n=!1){if(s){const o=s[e]||(s[e]=[]),i=t.__weh||(t.__weh=(...r)=>{if(s.isUnmounted)return;Rt();const l=as(s),c=Me(t,s,e,r);return l(),$t(),c});return n?o.unshift(i):o.push(i),i}}const Ze=e=>(t,s=ge)=>(!Us||e==="sp")&&Vs(e,(...n)=>t(...n),s),al=Ze("bm"),ul=Ze("m"),dl=Ze("bu"),fl=Ze("u"),hl=Ze("bum"),Si=Ze("um"),pl=Ze("sp"),_l=Ze("rtg"),gl=Ze("rtc");function ml(e,t=ge){Vs("ec",e,t)}function Nt(e,t,s,n){let o;const i=s&&s[n];if(j(e)||ie(e)){o=new Array(e.length);for(let r=0,l=e.length;r<l;r++)o[r]=t(e[r],r,void 0,i&&i[r])}else if(typeof e=="number"){o=new Array(e);for(let r=0;r<e;r++)o[r]=t(r+1,r,void 0,i&&i[r])}else if(X(e))if(e[Symbol.iterator])o=Array.from(e,(r,l)=>t(r,l,void 0,i&&i[l]));else{const r=Object.keys(e);o=new Array(r.length);for(let l=0,c=r.length;l<c;l++){const h=r[l];o[l]=t(e[h],h,l,i&&i[l])}}else o=[];return s&&(s[n]=o),o}const ln=e=>e?qi(e)?Hs(e)||e.proxy:ln(e.parent):null,Qt=de(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>ln(e.parent),$root:e=>ln(e.root),$emit:e=>e.emit,$options:e=>Mn(e),$forceUpdate:e=>e.f||(e.f=()=>{e.effect.dirty=!0,On(e.update)}),$nextTick:e=>e.n||(e.n=Tn.bind(e.proxy)),$watch:e=>il.bind(e)}),Gs=(e,t)=>e!==ee&&!e.__isScriptSetup&&K(e,t),yl={get({_:e},t){const{ctx:s,setupState:n,data:o,props:i,accessCache:r,type:l,appContext:c}=e;let h;if(t[0]!=="$"){const v=r[t];if(v!==void 0)switch(v){case 1:return n[t];case 2:return o[t];case 4:return s[t];case 3:return i[t]}else{if(Gs(n,t))return r[t]=1,n[t];if(o!==ee&&K(o,t))return r[t]=2,o[t];if((h=e.propsOptions[0])&&K(h,t))return r[t]=3,i[t];if(s!==ee&&K(s,t))return r[t]=4,s[t];cn&&(r[t]=0)}}const f=Qt[t];let p,_;if(f)return t==="$attrs"&&xe(e,"get",t),f(e);if((p=l.__cssModules)&&(p=p[t]))return p;if(s!==ee&&K(s,t))return r[t]=4,s[t];if(_=c.config.globalProperties,K(_,t))return _[t]},set({_:e},t,s){const{data:n,setupState:o,ctx:i}=e;return Gs(o,t)?(o[t]=s,!0):n!==ee&&K(n,t)?(n[t]=s,!0):K(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=s,!0)},has({_:{data:e,setupState:t,accessCache:s,ctx:n,appContext:o,propsOptions:i}},r){let l;return!!s[r]||e!==ee&&K(e,r)||Gs(t,r)||(l=i[0])&&K(l,r)||K(n,r)||K(Qt,r)||K(o.config.globalProperties,r)},defineProperty(e,t,s){return s.get!=null?e._.accessCache[t]=0:K(s,"value")&&this.set(e,t,s.value,null),Reflect.defineProperty(e,t,s)}};function eo(e){return j(e)?e.reduce((t,s)=>(t[s]=null,t),{}):e}let cn=!0;function vl(e){const t=Mn(e),s=e.proxy,n=e.ctx;cn=!1,t.beforeCreate&&to(t.beforeCreate,e,"bc");const{data:o,computed:i,methods:r,watch:l,provide:c,inject:h,created:f,beforeMount:p,mounted:_,beforeUpdate:v,updated:A,activated:I,deactivated:V,beforeDestroy:T,beforeUnmount:L,destroyed:F,unmounted:W,render:oe,renderTracked:U,renderTriggered:me,errorCaptured:Se,serverPrefetch:ft,expose:je,inheritAttrs:Xe,components:ht,directives:Le,filters:Bt}=t;if(h&&wl(h,n,null),r)for(const Z in r){const G=r[Z];q(G)&&(n[Z]=G.bind(s))}if(o){const Z=o.call(s,s);X(Z)&&(e.data=We(Z))}if(cn=!0,i)for(const Z in i){const G=i[Z],Ke=q(G)?G.bind(s,s):q(G.get)?G.get.bind(s,s):$e,et=!q(G)&&q(G.set)?G.set.bind(s):$e,Ne=Te({get:Ke,set:et});Object.defineProperty(n,Z,{enumerable:!0,configurable:!0,get:()=>Ne.value,set:ve=>Ne.value=ve})}if(l)for(const Z in l)ki(l[Z],n,s,Z);if(c){const Z=q(c)?c.call(s):c;Reflect.ownKeys(Z).forEach(G=>{xs(G,Z[G])})}f&&to(f,e,"c");function re(Z,G){j(G)?G.forEach(Ke=>Z(Ke.bind(s))):G&&Z(G.bind(s))}if(re(al,p),re(ul,_),re(dl,v),re(fl,A),re(rl,I),re(ll,V),re(ml,Se),re(gl,U),re(_l,me),re(hl,L),re(Si,W),re(pl,ft),j(je))if(je.length){const Z=e.exposed||(e.exposed={});je.forEach(G=>{Object.defineProperty(Z,G,{get:()=>s[G],set:Ke=>s[G]=Ke})})}else e.exposed||(e.exposed={});oe&&e.render===$e&&(e.render=oe),Xe!=null&&(e.inheritAttrs=Xe),ht&&(e.components=ht),Le&&(e.directives=Le)}function wl(e,t,s=$e){j(e)&&(e=an(e));for(const n in e){const o=e[n];let i;X(o)?"default"in o?i=Qe(o.from||n,o.default,!0):i=Qe(o.from||n):i=Qe(o),Ce(i)?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>i.value,set:r=>i.value=r}):t[n]=i}}function to(e,t,s){Me(j(e)?e.map(n=>n.bind(t.proxy)):e.bind(t.proxy),t,s)}function ki(e,t,s,n){const o=n.includes(".")?Ci(s,n):()=>s[n];if(ie(e)){const i=t[e];q(i)&&ws(o,i)}else if(q(e))ws(o,e.bind(s));else if(X(e))if(j(e))e.forEach(i=>ki(i,t,s,n));else{const i=q(e.handler)?e.handler.bind(s):t[e.handler];q(i)&&ws(o,i,e)}}function Mn(e){const t=e.type,{mixins:s,extends:n}=t,{mixins:o,optionsCache:i,config:{optionMergeStrategies:r}}=e.appContext,l=i.get(t);let c;return l?c=l:!o.length&&!s&&!n?c=t:(c={},o.length&&o.forEach(h=>As(c,h,r,!0)),As(c,t,r)),X(t)&&i.set(t,c),c}function As(e,t,s,n=!1){const{mixins:o,extends:i}=t;i&&As(e,i,s,!0),o&&o.forEach(r=>As(e,r,s,!0));for(const r in t)if(!(n&&r==="expose")){const l=bl[r]||s&&s[r];e[r]=l?l(e[r],t[r]):t[r]}return e}const bl={data:so,props:no,emits:no,methods:Gt,computed:Gt,beforeCreate:ye,created:ye,beforeMount:ye,mounted:ye,beforeUpdate:ye,updated:ye,beforeDestroy:ye,beforeUnmount:ye,destroyed:ye,unmounted:ye,activated:ye,deactivated:ye,errorCaptured:ye,serverPrefetch:ye,components:Gt,directives:Gt,watch:Cl,provide:so,inject:xl};function so(e,t){return t?e?function(){return de(q(e)?e.call(this,this):e,q(t)?t.call(this,this):t)}:t:e}function xl(e,t){return Gt(an(e),an(t))}function an(e){if(j(e)){const t={};for(let s=0;s<e.length;s++)t[e[s]]=e[s];return t}return e}function ye(e,t){return e?[...new Set([].concat(e,t))]:t}function Gt(e,t){return e?de(Object.create(null),e,t):t}function no(e,t){return e?j(e)&&j(t)?[...new Set([...e,...t])]:de(Object.create(null),eo(e),eo(t??{})):t}function Cl(e,t){if(!e)return t;if(!t)return e;const s=de(Object.create(null),e);for(const n in t)s[n]=ye(e[n],t[n]);return s}function Ai(){return{app:null,config:{isNativeTag:or,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let El=0;function Rl(e,t){return function(n,o=null){q(n)||(n=de({},n)),o!=null&&!X(o)&&(o=null);const i=Ai(),r=new WeakSet;let l=!1;const c=i.app={_uid:El++,_component:n,_props:o,_container:null,_context:i,_instance:null,version:Ql,get config(){return i.config},set config(h){},use(h,...f){return r.has(h)||(h&&q(h.install)?(r.add(h),h.install(c,...f)):q(h)&&(r.add(h),h(c,...f))),c},mixin(h){return i.mixins.includes(h)||i.mixins.push(h),c},component(h,f){return f?(i.components[h]=f,c):i.components[h]},directive(h,f){return f?(i.directives[h]=f,c):i.directives[h]},mount(h,f,p){if(!l){const _=ne(n,o);return _.appContext=i,p===!0?p="svg":p===!1&&(p=void 0),f&&t?t(_,h):e(_,h,p),l=!0,c._container=h,h.__vue_app__=c,Hs(_.component)||_.component.proxy}},unmount(){l&&(e(null,c._container),delete c._container.__vue_app__)},provide(h,f){return i.provides[h]=f,c},runWithContext(h){const f=Zt;Zt=c;try{return h()}finally{Zt=f}}};return c}}let Zt=null;function xs(e,t){if(ge){let s=ge.provides;const n=ge.parent&&ge.parent.provides;n===s&&(s=ge.provides=Object.create(n)),s[e]=t}}function Qe(e,t,s=!1){const n=ge||be;if(n||Zt){const o=n?n.parent==null?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:Zt._context.provides;if(o&&e in o)return o[e];if(arguments.length>1)return s&&q(t)?t.call(n&&n.proxy):t}}function $l(e,t,s,n=!1){const o={},i={};$s(i,Fs,1),e.propsDefaults=Object.create(null),Pi(e,t,o,i);for(const r in e.propsOptions[0])r in o||(o[r]=void 0);s?e.props=n?o:ri(o):e.type.props?e.props=o:e.props=i,e.attrs=i}function Sl(e,t,s,n){const{props:o,attrs:i,vnode:{patchFlag:r}}=e,l=z(o),[c]=e.propsOptions;let h=!1;if((n||r>0)&&!(r&16)){if(r&8){const f=e.vnode.dynamicProps;for(let p=0;p<f.length;p++){let _=f[p];if(Ls(e.emitsOptions,_))continue;const v=t[_];if(c)if(K(i,_))v!==i[_]&&(i[_]=v,h=!0);else{const A=De(_);o[A]=un(c,l,A,v,e,!1)}else v!==i[_]&&(i[_]=v,h=!0)}}}else{Pi(e,t,o,i)&&(h=!0);let f;for(const p in l)(!t||!K(t,p)&&((f=Et(p))===p||!K(t,f)))&&(c?s&&(s[p]!==void 0||s[f]!==void 0)&&(o[p]=un(c,l,p,void 0,e,!0)):delete o[p]);if(i!==l)for(const p in i)(!t||!K(t,p))&&(delete i[p],h=!0)}h&&Je(e,"set","$attrs")}function Pi(e,t,s,n){const[o,i]=e.propsOptions;let r=!1,l;if(t)for(let c in t){if(Jt(c))continue;const h=t[c];let f;o&&K(o,f=De(c))?!i||!i.includes(f)?s[f]=h:(l||(l={}))[f]=h:Ls(e.emitsOptions,c)||(!(c in n)||h!==n[c])&&(n[c]=h,r=!0)}if(i){const c=z(s),h=l||ee;for(let f=0;f<i.length;f++){const p=i[f];s[p]=un(o,c,p,h[p],e,!K(h,p))}}return r}function un(e,t,s,n,o,i){const r=e[s];if(r!=null){const l=K(r,"default");if(l&&n===void 0){const c=r.default;if(r.type!==Function&&!r.skipFactory&&q(c)){const{propsDefaults:h}=o;if(s in h)n=h[s];else{const f=as(o);n=h[s]=c.call(null,t),f()}}else n=c}r[0]&&(i&&!l?n=!1:r[1]&&(n===""||n===Et(s))&&(n=!0))}return n}function Ti(e,t,s=!1){const n=t.propsCache,o=n.get(e);if(o)return o;const i=e.props,r={},l=[];let c=!1;if(!q(e)){const f=p=>{c=!0;const[_,v]=Ti(p,t,!0);de(r,_),v&&l.push(...v)};!s&&t.mixins.length&&t.mixins.forEach(f),e.extends&&f(e.extends),e.mixins&&e.mixins.forEach(f)}if(!i&&!c)return X(e)&&n.set(e,Ot),Ot;if(j(i))for(let f=0;f<i.length;f++){const p=De(i[f]);oo(p)&&(r[p]=ee)}else if(i)for(const f in i){const p=De(f);if(oo(p)){const _=i[f],v=r[p]=j(_)||q(_)?{type:_}:de({},_);if(v){const A=lo(Boolean,v.type),I=lo(String,v.type);v[0]=A>-1,v[1]=I<0||A<I,(A>-1||K(v,"default"))&&l.push(p)}}}const h=[r,l];return X(e)&&n.set(e,h),h}function oo(e){return e[0]!=="$"&&!Jt(e)}function io(e){return e===null?"null":typeof e=="function"?e.name||"":typeof e=="object"&&e.constructor&&e.constructor.name||""}function ro(e,t){return io(e)===io(t)}function lo(e,t){return j(t)?t.findIndex(s=>ro(s,e)):q(t)&&ro(t,e)?0:-1}const Oi=e=>e[0]==="_"||e==="$stable",In=e=>j(e)?e.map(Fe):[Fe(e)],kl=(e,t,s)=>{if(t._n)return t;const n=mt((...o)=>In(t(...o)),s);return n._c=!1,n},Mi=(e,t,s)=>{const n=e._ctx;for(const o in e){if(Oi(o))continue;const i=e[o];if(q(i))t[o]=kl(o,i,n);else if(i!=null){const r=In(i);t[o]=()=>r}}},Ii=(e,t)=>{const s=In(t);e.slots.default=()=>s},Al=(e,t)=>{if(e.vnode.shapeFlag&32){const s=t._;s?(e.slots=z(t),$s(t,"_",s)):Mi(t,e.slots={})}else e.slots={},t&&Ii(e,t);$s(e.slots,Fs,1)},Pl=(e,t,s)=>{const{vnode:n,slots:o}=e;let i=!0,r=ee;if(n.shapeFlag&32){const l=t._;l?s&&l===1?i=!1:(de(o,t),!s&&l===1&&delete o._):(i=!t.$stable,Mi(t,o)),r=t}else t&&(Ii(e,t),r={default:1});if(i)for(const l in o)!Oi(l)&&r[l]==null&&delete o[l]};function dn(e,t,s,n,o=!1){if(j(e)){e.forEach((_,v)=>dn(_,t&&(j(t)?t[v]:t),s,n,o));return}if(bs(n)&&!o)return;const i=n.shapeFlag&4?Hs(n.component)||n.component.proxy:n.el,r=o?null:i,{i:l,r:c}=e,h=t&&t.r,f=l.refs===ee?l.refs={}:l.refs,p=l.setupState;if(h!=null&&h!==c&&(ie(h)?(f[h]=null,K(p,h)&&(p[h]=null)):Ce(h)&&(h.value=null)),q(c))ct(c,l,12,[r,f]);else{const _=ie(c),v=Ce(c);if(_||v){const A=()=>{if(e.f){const I=_?K(p,c)?p[c]:f[c]:c.value;o?j(I)&&vn(I,i):j(I)?I.includes(i)||I.push(i):_?(f[c]=[i],K(p,c)&&(p[c]=f[c])):(c.value=[i],e.k&&(f[e.k]=c.value))}else _?(f[c]=r,K(p,c)&&(p[c]=r)):v&&(c.value=r,e.k&&(f[e.k]=r))};r?(A.id=-1,we(A,s)):A()}}}const we=sl;function Tl(e){return Ol(e)}function Ol(e,t){const s=zo();s.__VUE__=!0;const{insert:n,remove:o,patchProp:i,createElement:r,createText:l,createComment:c,setText:h,setElementText:f,parentNode:p,nextSibling:_,setScopeId:v=$e,insertStaticContent:A}=e,I=(a,d,g,w=null,m=null,C=null,$=void 0,x=null,E=!!d.dynamicChildren)=>{if(a===d)return;a&&!zt(a,d)&&(w=y(a),ve(a,m,C,!0),a=null),d.patchFlag===-2&&(E=!1,d.dynamicChildren=null);const{type:b,ref:k,shapeFlag:M}=d;switch(b){case qs:V(a,d,g,w);break;case Ct:T(a,d,g,w);break;case Cs:a==null&&L(d,g,w,$);break;case pe:ht(a,d,g,w,m,C,$,x,E);break;default:M&1?oe(a,d,g,w,m,C,$,x,E):M&6?Le(a,d,g,w,m,C,$,x,E):(M&64||M&128)&&b.process(a,d,g,w,m,C,$,x,E,P)}k!=null&&m&&dn(k,a&&a.ref,C,d||a,!d)},V=(a,d,g,w)=>{if(a==null)n(d.el=l(d.children),g,w);else{const m=d.el=a.el;d.children!==a.children&&h(m,d.children)}},T=(a,d,g,w)=>{a==null?n(d.el=c(d.children||""),g,w):d.el=a.el},L=(a,d,g,w)=>{[a.el,a.anchor]=A(a.children,d,g,w,a.el,a.anchor)},F=({el:a,anchor:d},g,w)=>{let m;for(;a&&a!==d;)m=_(a),n(a,g,w),a=m;n(d,g,w)},W=({el:a,anchor:d})=>{let g;for(;a&&a!==d;)g=_(a),o(a),a=g;o(d)},oe=(a,d,g,w,m,C,$,x,E)=>{d.type==="svg"?$="svg":d.type==="math"&&($="mathml"),a==null?U(d,g,w,m,C,$,x,E):ft(a,d,m,C,$,x,E)},U=(a,d,g,w,m,C,$,x)=>{let E,b;const{props:k,shapeFlag:M,transition:O,dirs:N}=a;if(E=a.el=r(a.type,C,k&&k.is,k),M&8?f(E,a.children):M&16&&Se(a.children,E,null,w,m,Js(a,C),$,x),N&&pt(a,null,w,"created"),me(E,a,a.scopeId,$,w),k){for(const Y in k)Y!=="value"&&!Jt(Y)&&i(E,Y,null,k[Y],C,a.children,w,m,fe);"value"in k&&i(E,"value",null,k.value,C),(b=k.onVnodeBeforeMount)&&qe(b,w,a)}N&&pt(a,null,w,"beforeMount");const B=Ml(m,O);B&&O.beforeEnter(E),n(E,d,g),((b=k&&k.onVnodeMounted)||B||N)&&we(()=>{b&&qe(b,w,a),B&&O.enter(E),N&&pt(a,null,w,"mounted")},m)},me=(a,d,g,w,m)=>{if(g&&v(a,g),w)for(let C=0;C<w.length;C++)v(a,w[C]);if(m){let C=m.subTree;if(d===C){const $=m.vnode;me(a,$,$.scopeId,$.slotScopeIds,m.parent)}}},Se=(a,d,g,w,m,C,$,x,E=0)=>{for(let b=E;b<a.length;b++){const k=a[b]=x?ot(a[b]):Fe(a[b]);I(null,k,d,g,w,m,C,$,x)}},ft=(a,d,g,w,m,C,$)=>{const x=d.el=a.el;let{patchFlag:E,dynamicChildren:b,dirs:k}=d;E|=a.patchFlag&16;const M=a.props||ee,O=d.props||ee;let N;if(g&&_t(g,!1),(N=O.onVnodeBeforeUpdate)&&qe(N,g,d,a),k&&pt(d,a,g,"beforeUpdate"),g&&_t(g,!0),b?je(a.dynamicChildren,b,x,g,w,Js(d,m),C):$||G(a,d,x,null,g,w,Js(d,m),C,!1),E>0){if(E&16)Xe(x,d,M,O,g,w,m);else if(E&2&&M.class!==O.class&&i(x,"class",null,O.class,m),E&4&&i(x,"style",M.style,O.style,m),E&8){const B=d.dynamicProps;for(let Y=0;Y<B.length;Y++){const se=B[Y],le=M[se],Ae=O[se];(Ae!==le||se==="value")&&i(x,se,le,Ae,m,a.children,g,w,fe)}}E&1&&a.children!==d.children&&f(x,d.children)}else!$&&b==null&&Xe(x,d,M,O,g,w,m);((N=O.onVnodeUpdated)||k)&&we(()=>{N&&qe(N,g,d,a),k&&pt(d,a,g,"updated")},w)},je=(a,d,g,w,m,C,$)=>{for(let x=0;x<d.length;x++){const E=a[x],b=d[x],k=E.el&&(E.type===pe||!zt(E,b)||E.shapeFlag&70)?p(E.el):g;I(E,b,k,null,w,m,C,$,!0)}},Xe=(a,d,g,w,m,C,$)=>{if(g!==w){if(g!==ee)for(const x in g)!Jt(x)&&!(x in w)&&i(a,x,g[x],null,$,d.children,m,C,fe);for(const x in w){if(Jt(x))continue;const E=w[x],b=g[x];E!==b&&x!=="value"&&i(a,x,b,E,$,d.children,m,C,fe)}"value"in w&&i(a,"value",g.value,w.value,$)}},ht=(a,d,g,w,m,C,$,x,E)=>{const b=d.el=a?a.el:l(""),k=d.anchor=a?a.anchor:l("");let{patchFlag:M,dynamicChildren:O,slotScopeIds:N}=d;N&&(x=x?x.concat(N):N),a==null?(n(b,g,w),n(k,g,w),Se(d.children||[],g,k,m,C,$,x,E)):M>0&&M&64&&O&&a.dynamicChildren?(je(a.dynamicChildren,O,g,m,C,$,x),(d.key!=null||m&&d===m.subTree)&&ji(a,d,!0)):G(a,d,g,k,m,C,$,x,E)},Le=(a,d,g,w,m,C,$,x,E)=>{d.slotScopeIds=x,a==null?d.shapeFlag&512?m.ctx.activate(d,g,w,$,E):Bt(d,g,w,m,C,$,E):St(a,d,E)},Bt=(a,d,g,w,m,C,$)=>{const x=a.component=Dl(a,w,m);if(Ri(a)&&(x.ctx.renderer=P),Bl(x),x.asyncDep){if(m&&m.registerDep(x,re),!a.el){const E=x.subTree=ne(Ct);T(null,E,d,g)}}else re(x,a,d,g,m,C,$)},St=(a,d,g)=>{const w=d.component=a.component;if(Zr(a,d,g))if(w.asyncDep&&!w.asyncResolved){Z(w,d,g);return}else w.next=d,Kr(w.update),w.effect.dirty=!0,w.update();else d.el=a.el,w.vnode=d},re=(a,d,g,w,m,C,$)=>{const x=()=>{if(a.isMounted){let{next:k,bu:M,u:O,parent:N,vnode:B}=a;{const Pt=Li(a);if(Pt){k&&(k.el=B.el,Z(a,k,$)),Pt.asyncDep.then(()=>{a.isUnmounted||x()});return}}let Y=k,se;_t(a,!1),k?(k.el=B.el,Z(a,k,$)):k=B,M&&ys(M),(se=k.props&&k.props.onVnodeBeforeUpdate)&&qe(se,N,k,B),_t(a,!0);const le=Ws(a),Ae=a.subTree;a.subTree=le,I(Ae,le,p(Ae.el),y(Ae),a,m,C),k.el=le.el,Y===null&&Yr(a,le.el),O&&we(O,m),(se=k.props&&k.props.onVnodeUpdated)&&we(()=>qe(se,N,k,B),m)}else{let k;const{el:M,props:O}=d,{bm:N,m:B,parent:Y}=a,se=bs(d);if(_t(a,!1),N&&ys(N),!se&&(k=O&&O.onVnodeBeforeMount)&&qe(k,Y,d),_t(a,!0),M&&te){const le=()=>{a.subTree=Ws(a),te(M,a.subTree,a,m,null)};se?d.type.__asyncLoader().then(()=>!a.isUnmounted&&le()):le()}else{const le=a.subTree=Ws(a);I(null,le,g,w,a,m,C),d.el=le.el}if(B&&we(B,m),!se&&(k=O&&O.onVnodeMounted)){const le=d;we(()=>qe(k,Y,le),m)}(d.shapeFlag&256||Y&&bs(Y.vnode)&&Y.vnode.shapeFlag&256)&&a.a&&we(a.a,m),a.isMounted=!0,d=g=w=null}},E=a.effect=new Cn(x,$e,()=>On(b),a.scope),b=a.update=()=>{E.dirty&&E.run()};b.id=a.uid,_t(a,!0),b()},Z=(a,d,g)=>{d.component=a;const w=a.vnode.props;a.vnode=d,a.next=null,Sl(a,d.props,w,g),Pl(a,d.children,g),Rt(),Zn(a),$t()},G=(a,d,g,w,m,C,$,x,E=!1)=>{const b=a&&a.children,k=a?a.shapeFlag:0,M=d.children,{patchFlag:O,shapeFlag:N}=d;if(O>0){if(O&128){et(b,M,g,w,m,C,$,x,E);return}else if(O&256){Ke(b,M,g,w,m,C,$,x,E);return}}N&8?(k&16&&fe(b,m,C),M!==b&&f(g,M)):k&16?N&16?et(b,M,g,w,m,C,$,x,E):fe(b,m,C,!0):(k&8&&f(g,""),N&16&&Se(M,g,w,m,C,$,x,E))},Ke=(a,d,g,w,m,C,$,x,E)=>{a=a||Ot,d=d||Ot;const b=a.length,k=d.length,M=Math.min(b,k);let O;for(O=0;O<M;O++){const N=d[O]=E?ot(d[O]):Fe(d[O]);I(a[O],N,g,null,m,C,$,x,E)}b>k?fe(a,m,C,!0,!1,M):Se(d,g,w,m,C,$,x,E,M)},et=(a,d,g,w,m,C,$,x,E)=>{let b=0;const k=d.length;let M=a.length-1,O=k-1;for(;b<=M&&b<=O;){const N=a[b],B=d[b]=E?ot(d[b]):Fe(d[b]);if(zt(N,B))I(N,B,g,null,m,C,$,x,E);else break;b++}for(;b<=M&&b<=O;){const N=a[M],B=d[O]=E?ot(d[O]):Fe(d[O]);if(zt(N,B))I(N,B,g,null,m,C,$,x,E);else break;M--,O--}if(b>M){if(b<=O){const N=O+1,B=N<k?d[N].el:w;for(;b<=O;)I(null,d[b]=E?ot(d[b]):Fe(d[b]),g,B,m,C,$,x,E),b++}}else if(b>O)for(;b<=M;)ve(a[b],m,C,!0),b++;else{const N=b,B=b,Y=new Map;for(b=B;b<=O;b++){const Ee=d[b]=E?ot(d[b]):Fe(d[b]);Ee.key!=null&&Y.set(Ee.key,b)}let se,le=0;const Ae=O-B+1;let Pt=!1,qn=0;const Kt=new Array(Ae);for(b=0;b<Ae;b++)Kt[b]=0;for(b=N;b<=M;b++){const Ee=a[b];if(le>=Ae){ve(Ee,m,C,!0);continue}let Ve;if(Ee.key!=null)Ve=Y.get(Ee.key);else for(se=B;se<=O;se++)if(Kt[se-B]===0&&zt(Ee,d[se])){Ve=se;break}Ve===void 0?ve(Ee,m,C,!0):(Kt[Ve-B]=b+1,Ve>=qn?qn=Ve:Pt=!0,I(Ee,d[Ve],g,null,m,C,$,x,E),le++)}const Fn=Pt?Il(Kt):Ot;for(se=Fn.length-1,b=Ae-1;b>=0;b--){const Ee=B+b,Ve=d[Ee],Un=Ee+1<k?d[Ee+1].el:w;Kt[b]===0?I(null,Ve,g,Un,m,C,$,x,E):Pt&&(se<0||b!==Fn[se]?Ne(Ve,g,Un,2):se--)}}},Ne=(a,d,g,w,m=null)=>{const{el:C,type:$,transition:x,children:E,shapeFlag:b}=a;if(b&6){Ne(a.component.subTree,d,g,w);return}if(b&128){a.suspense.move(d,g,w);return}if(b&64){$.move(a,d,g,P);return}if($===pe){n(C,d,g);for(let M=0;M<E.length;M++)Ne(E[M],d,g,w);n(a.anchor,d,g);return}if($===Cs){F(a,d,g);return}if(w!==2&&b&1&&x)if(w===0)x.beforeEnter(C),n(C,d,g),we(()=>x.enter(C),m);else{const{leave:M,delayLeave:O,afterLeave:N}=x,B=()=>n(C,d,g),Y=()=>{M(C,()=>{B(),N&&N()})};O?O(C,B,Y):Y()}else n(C,d,g)},ve=(a,d,g,w=!1,m=!1)=>{const{type:C,props:$,ref:x,children:E,dynamicChildren:b,shapeFlag:k,patchFlag:M,dirs:O}=a;if(x!=null&&dn(x,null,g,a,!0),k&256){d.ctx.deactivate(a);return}const N=k&1&&O,B=!bs(a);let Y;if(B&&(Y=$&&$.onVnodeBeforeUnmount)&&qe(Y,d,a),k&6)us(a.component,g,w);else{if(k&128){a.suspense.unmount(g,w);return}N&&pt(a,null,d,"beforeUnmount"),k&64?a.type.remove(a,d,g,m,P,w):b&&(C!==pe||M>0&&M&64)?fe(b,d,g,!1,!0):(C===pe&&M&384||!m&&k&16)&&fe(E,d,g),w&&kt(a)}(B&&(Y=$&&$.onVnodeUnmounted)||N)&&we(()=>{Y&&qe(Y,d,a),N&&pt(a,null,d,"unmounted")},g)},kt=a=>{const{type:d,el:g,anchor:w,transition:m}=a;if(d===pe){At(g,w);return}if(d===Cs){W(a);return}const C=()=>{o(g),m&&!m.persisted&&m.afterLeave&&m.afterLeave()};if(a.shapeFlag&1&&m&&!m.persisted){const{leave:$,delayLeave:x}=m,E=()=>$(g,C);x?x(a.el,C,E):E()}else C()},At=(a,d)=>{let g;for(;a!==d;)g=_(a),o(a),a=g;o(d)},us=(a,d,g)=>{const{bum:w,scope:m,update:C,subTree:$,um:x}=a;w&&ys(w),m.stop(),C&&(C.active=!1,ve($,a,d,g)),x&&we(x,d),we(()=>{a.isUnmounted=!0},d),d&&d.pendingBranch&&!d.isUnmounted&&a.asyncDep&&!a.asyncResolved&&a.suspenseId===d.pendingId&&(d.deps--,d.deps===0&&d.resolve())},fe=(a,d,g,w=!1,m=!1,C=0)=>{for(let $=C;$<a.length;$++)ve(a[$],d,g,w,m)},y=a=>a.shapeFlag&6?y(a.component.subTree):a.shapeFlag&128?a.suspense.next():_(a.anchor||a.el);let S=!1;const R=(a,d,g)=>{a==null?d._vnode&&ve(d._vnode,null,null,!0):I(d._vnode||null,a,d,null,null,null,g),S||(S=!0,Zn(),gi(),S=!1),d._vnode=a},P={p:I,um:ve,m:Ne,r:kt,mt:Bt,mc:Se,pc:G,pbc:je,n:y,o:e};let J,te;return t&&([J,te]=t(P)),{render:R,hydrate:J,createApp:Rl(R,J)}}function Js({type:e,props:t},s){return s==="svg"&&e==="foreignObject"||s==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:s}function _t({effect:e,update:t},s){e.allowRecurse=t.allowRecurse=s}function Ml(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function ji(e,t,s=!1){const n=e.children,o=t.children;if(j(n)&&j(o))for(let i=0;i<n.length;i++){const r=n[i];let l=o[i];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=o[i]=ot(o[i]),l.el=r.el),s||ji(r,l)),l.type===qs&&(l.el=r.el)}}function Il(e){const t=e.slice(),s=[0];let n,o,i,r,l;const c=e.length;for(n=0;n<c;n++){const h=e[n];if(h!==0){if(o=s[s.length-1],e[o]<h){t[n]=o,s.push(n);continue}for(i=0,r=s.length-1;i<r;)l=i+r>>1,e[s[l]]<h?i=l+1:r=l;h<e[s[i]]&&(i>0&&(t[n]=s[i-1]),s[i]=n)}}for(i=s.length,r=s[i-1];i-- >0;)s[i]=r,r=t[r];return s}function Li(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Li(t)}const jl=e=>e.__isTeleport,pe=Symbol.for("v-fgt"),qs=Symbol.for("v-txt"),Ct=Symbol.for("v-cmt"),Cs=Symbol.for("v-stc"),Yt=[];let Oe=null;function H(e=!1){Yt.push(Oe=e?null:[])}function Ll(){Yt.pop(),Oe=Yt[Yt.length-1]||null}let is=1;function co(e){is+=e}function Ni(e){return e.dynamicChildren=is>0?Oe||Ot:null,Ll(),is>0&&Oe&&Oe.push(e),e}function D(e,t,s,n,o,i){return Ni(u(e,t,s,n,o,i,!0))}function jn(e,t,s,n,o){return Ni(ne(e,t,s,n,o,!0))}function fn(e){return e?e.__v_isVNode===!0:!1}function zt(e,t){return e.type===t.type&&e.key===t.key}const Fs="__vInternal",Vi=({key:e})=>e??null,Es=({ref:e,ref_key:t,ref_for:s})=>(typeof e=="number"&&(e=""+e),e!=null?ie(e)||Ce(e)||q(e)?{i:be,r:e,k:t,f:!!s}:e:null);function u(e,t=null,s=null,n=0,o=null,i=e===pe?0:1,r=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Vi(t),ref:t&&Es(t),scopeId:Ns,slotScopeIds:null,children:s,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:n,dynamicProps:o,dynamicChildren:null,appContext:null,ctx:be};return l?(Ln(c,s),i&128&&e.normalize(c)):s&&(c.shapeFlag|=ie(s)?8:16),is>0&&!r&&Oe&&(c.patchFlag>0||i&6)&&c.patchFlag!==32&&Oe.push(c),c}const ne=Nl;function Nl(e,t=null,s=null,n=0,o=null,i=!1){if((!e||e===Xr)&&(e=Ct),fn(e)){const l=qt(e,t,!0);return s&&Ln(l,s),is>0&&!i&&Oe&&(l.shapeFlag&6?Oe[Oe.indexOf(e)]=l:Oe.push(l)),l.patchFlag|=-2,l}if(Jl(e)&&(e=e.__vccOpts),t){t=Vl(t);let{class:l,style:c}=t;l&&!ie(l)&&(t.class=He(l)),X(c)&&(ci(c)&&!j(c)&&(c=de({},c)),t.style=bn(c))}const r=ie(e)?1:tl(e)?128:jl(e)?64:X(e)?4:q(e)?2:0;return u(e,t,s,n,o,r,i,!0)}function Vl(e){return e?ci(e)||Fs in e?de({},e):e:null}function qt(e,t,s=!1){const{props:n,ref:o,patchFlag:i,children:r}=e,l=t?Fl(n||{},t):n;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Vi(l),ref:t&&t.ref?s&&o?j(o)?o.concat(Es(t)):[o,Es(t)]:Es(t):o,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==pe?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&qt(e.ssContent),ssFallback:e.ssFallback&&qt(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function ue(e=" ",t=0){return ne(qs,null,e,t)}function ql(e,t){const s=ne(Cs,null,e);return s.staticCount=t,s}function ce(e="",t=!1){return t?(H(),jn(Ct,null,e)):ne(Ct,null,e)}function Fe(e){return e==null||typeof e=="boolean"?ne(Ct):j(e)?ne(pe,null,e.slice()):typeof e=="object"?ot(e):ne(qs,null,String(e))}function ot(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:qt(e)}function Ln(e,t){let s=0;const{shapeFlag:n}=e;if(t==null)t=null;else if(j(t))s=16;else if(typeof t=="object")if(n&65){const o=t.default;o&&(o._c&&(o._d=!1),Ln(e,o()),o._c&&(o._d=!0));return}else{s=32;const o=t._;!o&&!(Fs in t)?t._ctx=be:o===3&&be&&(be.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else q(t)?(t={default:t,_ctx:be},s=32):(t=String(t),n&64?(s=16,t=[ue(t)]):s=8);e.children=t,e.shapeFlag|=s}function Fl(...e){const t={};for(let s=0;s<e.length;s++){const n=e[s];for(const o in n)if(o==="class")t.class!==n.class&&(t.class=He([t.class,n.class]));else if(o==="style")t.style=bn([t.style,n.style]);else if(Ts(o)){const i=t[o],r=n[o];r&&i!==r&&!(j(i)&&i.includes(r))&&(t[o]=i?[].concat(i,r):r)}else o!==""&&(t[o]=n[o])}return t}function qe(e,t,s,n=null){Me(e,t,7,[s,n])}const Ul=Ai();let Hl=0;function Dl(e,t,s){const n=e.type,o=(t?t.appContext:e.appContext)||Ul,i={uid:Hl++,vnode:e,type:n,parent:t,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new gr(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ti(n,o),emitsOptions:yi(n,o),emit:null,emitted:null,propsDefaults:ee,inheritAttrs:n.inheritAttrs,ctx:ee,data:ee,props:ee,attrs:ee,slots:ee,refs:ee,setupState:ee,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:s,suspenseId:s?s.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=Gr.bind(null,i),e.ce&&e.ce(i),i}let ge=null,Ps,hn;{const e=zo(),t=(s,n)=>{let o;return(o=e[s])||(o=e[s]=[]),o.push(n),i=>{o.length>1?o.forEach(r=>r(i)):o[0](i)}};Ps=t("__VUE_INSTANCE_SETTERS__",s=>ge=s),hn=t("__VUE_SSR_SETTERS__",s=>Us=s)}const as=e=>{const t=ge;return Ps(e),e.scope.on(),()=>{e.scope.off(),Ps(t)}},ao=()=>{ge&&ge.scope.off(),Ps(null)};function qi(e){return e.vnode.shapeFlag&4}let Us=!1;function Bl(e,t=!1){t&&hn(t);const{props:s,children:n}=e.vnode,o=qi(e);$l(e,s,o,t),Al(e,n);const i=o?Kl(e,t):void 0;return t&&hn(!1),i}function Kl(e,t){const s=e.type;e.accessCache=Object.create(null),e.proxy=ai(new Proxy(e.ctx,yl));const{setup:n}=s;if(n){const o=e.setupContext=n.length>1?Wl(e):null,i=as(e);Rt();const r=ct(n,e,0,[e.props,o]);if($t(),i(),Do(r)){if(r.then(ao,ao),t)return r.then(l=>{uo(e,l,t)}).catch(l=>{js(l,e,0)});e.asyncDep=r}else uo(e,r,t)}else Fi(e,t)}function uo(e,t,s){q(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:X(t)&&(e.setupState=hi(t)),Fi(e,s)}let fo;function Fi(e,t,s){const n=e.type;if(!e.render){if(!t&&fo&&!n.render){const o=n.template||Mn(e).template;if(o){const{isCustomElement:i,compilerOptions:r}=e.appContext.config,{delimiters:l,compilerOptions:c}=n,h=de(de({isCustomElement:i,delimiters:l},r),c);n.render=fo(o,h)}}e.render=n.render||$e}{const o=as(e);Rt();try{vl(e)}finally{$t(),o()}}}function zl(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get(t,s){return xe(e,"get","$attrs"),t[s]}}))}function Wl(e){const t=s=>{e.exposed=s||{}};return{get attrs(){return zl(e)},slots:e.slots,emit:e.emit,expose:t}}function Hs(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(hi(ai(e.exposed)),{get(t,s){if(s in t)return t[s];if(s in Qt)return Qt[s](e)},has(t,s){return s in t||s in Qt}}))}function Gl(e,t=!0){return q(e)?e.displayName||e.name:e.name||t&&e.__name}function Jl(e){return q(e)&&"__vccOpts"in e}const Te=(e,t)=>Vr(e,t,Us);function Ui(e,t,s){const n=arguments.length;return n===2?X(t)&&!j(t)?fn(t)?ne(e,null,[t]):ne(e,t):ne(e,null,t):(n>3?s=Array.prototype.slice.call(arguments,2):n===3&&fn(s)&&(s=[s]),ne(e,t,s))}const Ql="3.4.21";/**
* @vue/runtime-dom v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Zl="http://www.w3.org/2000/svg",Yl="http://www.w3.org/1998/Math/MathML",it=typeof document<"u"?document:null,ho=it&&it.createElement("template"),Xl={insert:(e,t,s)=>{t.insertBefore(e,s||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,s,n)=>{const o=t==="svg"?it.createElementNS(Zl,e):t==="mathml"?it.createElementNS(Yl,e):it.createElement(e,s?{is:s}:void 0);return e==="select"&&n&&n.multiple!=null&&o.setAttribute("multiple",n.multiple),o},createText:e=>it.createTextNode(e),createComment:e=>it.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>it.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,s,n,o,i){const r=s?s.previousSibling:t.lastChild;if(o&&(o===i||o.nextSibling))for(;t.insertBefore(o.cloneNode(!0),s),!(o===i||!(o=o.nextSibling)););else{ho.innerHTML=n==="svg"?`<svg>${e}</svg>`:n==="mathml"?`<math>${e}</math>`:e;const l=ho.content;if(n==="svg"||n==="mathml"){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}t.insertBefore(l,s)}return[r?r.nextSibling:t.firstChild,s?s.previousSibling:t.lastChild]}},ec=Symbol("_vtc");function tc(e,t,s){const n=e[ec];n&&(t=(t?[t,...n]:[...n]).join(" ")),t==null?e.removeAttribute("class"):s?e.setAttribute("class",t):e.className=t}const po=Symbol("_vod"),sc=Symbol("_vsh"),nc=Symbol(""),oc=/(^|;)\s*display\s*:/;function ic(e,t,s){const n=e.style,o=ie(s);let i=!1;if(s&&!o){if(t)if(ie(t))for(const r of t.split(";")){const l=r.slice(0,r.indexOf(":")).trim();s[l]==null&&Rs(n,l,"")}else for(const r in t)s[r]==null&&Rs(n,r,"");for(const r in s)r==="display"&&(i=!0),Rs(n,r,s[r])}else if(o){if(t!==s){const r=n[nc];r&&(s+=";"+r),n.cssText=s,i=oc.test(s)}}else t&&e.removeAttribute("style");po in e&&(e[po]=i?n.display:"",e[sc]&&(n.display="none"))}const _o=/\s*!important$/;function Rs(e,t,s){if(j(s))s.forEach(n=>Rs(e,t,n));else if(s==null&&(s=""),t.startsWith("--"))e.setProperty(t,s);else{const n=rc(e,t);_o.test(s)?e.setProperty(Et(n),s.replace(_o,""),"important"):e[n]=s}}const go=["Webkit","Moz","ms"],Qs={};function rc(e,t){const s=Qs[t];if(s)return s;let n=De(t);if(n!=="filter"&&n in e)return Qs[t]=n;n=Ms(n);for(let o=0;o<go.length;o++){const i=go[o]+n;if(i in e)return Qs[t]=i}return t}const mo="http://www.w3.org/1999/xlink";function lc(e,t,s,n,o){if(n&&t.startsWith("xlink:"))s==null?e.removeAttributeNS(mo,t.slice(6,t.length)):e.setAttributeNS(mo,t,s);else{const i=pr(t);s==null||i&&!Wo(s)?e.removeAttribute(t):e.setAttribute(t,i?"":s)}}function cc(e,t,s,n,o,i,r){if(t==="innerHTML"||t==="textContent"){n&&r(n,o,i),e[t]=s??"";return}const l=e.tagName;if(t==="value"&&l!=="PROGRESS"&&!l.includes("-")){const h=l==="OPTION"?e.getAttribute("value")||"":e.value,f=s??"";(h!==f||!("_value"in e))&&(e.value=f),s==null&&e.removeAttribute(t),e._value=s;return}let c=!1;if(s===""||s==null){const h=typeof e[t];h==="boolean"?s=Wo(s):s==null&&h==="string"?(s="",c=!0):h==="number"&&(s=0,c=!0)}try{e[t]=s}catch{}c&&e.removeAttribute(t)}function Ge(e,t,s,n){e.addEventListener(t,s,n)}function ac(e,t,s,n){e.removeEventListener(t,s,n)}const yo=Symbol("_vei");function uc(e,t,s,n,o=null){const i=e[yo]||(e[yo]={}),r=i[t];if(n&&r)r.value=n;else{const[l,c]=dc(t);if(n){const h=i[t]=pc(n,o);Ge(e,l,h,c)}else r&&(ac(e,l,r,c),i[t]=void 0)}}const vo=/(?:Once|Passive|Capture)$/;function dc(e){let t;if(vo.test(e)){t={};let n;for(;n=e.match(vo);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Et(e.slice(2)),t]}let Zs=0;const fc=Promise.resolve(),hc=()=>Zs||(fc.then(()=>Zs=0),Zs=Date.now());function pc(e,t){const s=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=s.attached)return;Me(_c(n,s.value),t,5,[n])};return s.value=e,s.attached=hc(),s}function _c(e,t){if(j(t)){const s=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{s.call(e),e._stopped=!0},t.map(n=>o=>!o._stopped&&n&&n(o))}else return t}const wo=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,gc=(e,t,s,n,o,i,r,l,c)=>{const h=o==="svg";t==="class"?tc(e,n,h):t==="style"?ic(e,s,n):Ts(t)?yn(t)||uc(e,t,s,n,r):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):mc(e,t,n,h))?cc(e,t,n,i,r,l,c):(t==="true-value"?e._trueValue=n:t==="false-value"&&(e._falseValue=n),lc(e,t,n,h))};function mc(e,t,s,n){if(n)return!!(t==="innerHTML"||t==="textContent"||t in e&&wo(t)&&q(s));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const o=e.tagName;if(o==="IMG"||o==="VIDEO"||o==="CANVAS"||o==="SOURCE")return!1}return wo(t)&&ie(s)?!1:t in e}const dt=e=>{const t=e.props["onUpdate:modelValue"]||!1;return j(t)?s=>ys(t,s):t};function yc(e){e.target.composing=!0}function bo(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ke=Symbol("_assign"),he={created(e,{modifiers:{lazy:t,trim:s,number:n}},o){e[ke]=dt(o);const i=n||o.props&&o.props.type==="number";Ge(e,t?"change":"input",r=>{if(r.target.composing)return;let l=e.value;s&&(l=l.trim()),i&&(l=ts(l)),e[ke](l)}),s&&Ge(e,"change",()=>{e.value=e.value.trim()}),t||(Ge(e,"compositionstart",yc),Ge(e,"compositionend",bo),Ge(e,"change",bo))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:s,trim:n,number:o}},i){if(e[ke]=dt(i),e.composing)return;const r=o||e.type==="number"?ts(e.value):e.value,l=t??"";r!==l&&(document.activeElement===e&&e.type!=="range"&&(s||n&&e.value.trim()===l)||(e.value=l))}},Hi={deep:!0,created(e,t,s){e[ke]=dt(s),Ge(e,"change",()=>{const n=e._modelValue,o=Ft(e),i=e.checked,r=e[ke];if(j(n)){const l=xn(n,o),c=l!==-1;if(i&&!c)r(n.concat(o));else if(!i&&c){const h=[...n];h.splice(l,1),r(h)}}else if(Dt(n)){const l=new Set(n);i?l.add(o):l.delete(o),r(l)}else r(Bi(e,i))})},mounted:xo,beforeUpdate(e,t,s){e[ke]=dt(s),xo(e,t,s)}};function xo(e,{value:t,oldValue:s},n){e._modelValue=t,j(t)?e.checked=xn(t,n.props.value)>-1:Dt(t)?e.checked=t.has(n.props.value):t!==s&&(e.checked=xt(t,Bi(e,!0)))}const vc={created(e,{value:t},s){e.checked=xt(t,s.props.value),e[ke]=dt(s),Ge(e,"change",()=>{e[ke](Ft(e))})},beforeUpdate(e,{value:t,oldValue:s},n){e[ke]=dt(n),t!==s&&(e.checked=xt(t,n.props.value))}},Di={deep:!0,created(e,{value:t,modifiers:{number:s}},n){const o=Dt(t);Ge(e,"change",()=>{const i=Array.prototype.filter.call(e.options,r=>r.selected).map(r=>s?ts(Ft(r)):Ft(r));e[ke](e.multiple?o?new Set(i):i:i[0]),e._assigning=!0,Tn(()=>{e._assigning=!1})}),e[ke]=dt(n)},mounted(e,{value:t,modifiers:{number:s}}){Co(e,t,s)},beforeUpdate(e,t,s){e[ke]=dt(s)},updated(e,{value:t,modifiers:{number:s}}){e._assigning||Co(e,t,s)}};function Co(e,t,s){const n=e.multiple,o=j(t);if(!(n&&!o&&!Dt(t))){for(let i=0,r=e.options.length;i<r;i++){const l=e.options[i],c=Ft(l);if(n)if(o){const h=typeof c;h==="string"||h==="number"?l.selected=t.includes(s?ts(c):c):l.selected=xn(t,c)>-1}else l.selected=t.has(c);else if(xt(Ft(l),t)){e.selectedIndex!==i&&(e.selectedIndex=i);return}}!n&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function Ft(e){return"_value"in e?e._value:e.value}function Bi(e,t){const s=t?"_trueValue":"_falseValue";return s in e?e[s]:t}const wc={created(e,t,s){ms(e,t,s,null,"created")},mounted(e,t,s){ms(e,t,s,null,"mounted")},beforeUpdate(e,t,s,n){ms(e,t,s,n,"beforeUpdate")},updated(e,t,s,n){ms(e,t,s,n,"updated")}};function bc(e,t){switch(e){case"SELECT":return Di;case"TEXTAREA":return he;default:switch(t){case"checkbox":return Hi;case"radio":return vc;default:return he}}}function ms(e,t,s,n,o){const r=bc(e.tagName,s.props&&s.props.type)[o];r&&r(e,t,s,n)}const xc=["ctrl","shift","alt","meta"],Cc={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>xc.some(s=>e[`${s}Key`]&&!t.includes(s))},Eo=(e,t)=>{const s=e._withMods||(e._withMods={}),n=t.join(".");return s[n]||(s[n]=(o,...i)=>{for(let r=0;r<t.length;r++){const l=Cc[t[r]];if(l&&l(o,t))return}return e(o,...i)})},Ec={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Rc=(e,t)=>{const s=e._withKeys||(e._withKeys={}),n=t.join(".");return s[n]||(s[n]=o=>{if(!("key"in o))return;const i=Et(o.key);if(t.some(r=>r===i||Ec[r]===i))return e(o)})},$c=de({patchProp:gc},Xl);let Ro;function Sc(){return Ro||(Ro=Tl($c))}const kc=(...e)=>{const t=Sc().createApp(...e),{mount:s}=t;return t.mount=n=>{const o=Pc(n);if(!o)return;const i=t._component;!q(i)&&!i.render&&!i.template&&(i.template=o.innerHTML),o.innerHTML="";const r=s(o,!1,Ac(o));return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),r},t};function Ac(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function Pc(e){return ie(e)?document.querySelector(e):e}class Tc{constructor(t,s){this.domain_origin=s,this.messages=t,this.login_email="",this.login_password="",this.user={},this.password_authorised=!1,this.mfa_authorised=!1,this.logged_in=!1,this.mfa_secret_confirmed=!1,this.mfa_qr_code_base64=[],this.email="",this.name="",this.role_name="",this.mfa_authenticator_code="",this.status="",this.invalid_token=!1,this.session_jwt=""}get_mfa_jwt_from_local_storage(t){return localStorage.getItem("mfa_jwt_"+t)}get_ip_address(){fetch("https://api.ipify.org?format=json").then(s=>s.json()).then(s=>{this.ip_address=s.ip}).catch(s=>{this.ip_address="127.0.0.1",console.log(s)})}api_reset_password_request(t){var s={};s.email=t;const n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)},o=this.domain_origin+"/api/admin/emails/password_reset_email";fetch(o,n).then(i=>i.json()).then(i=>{this.messages.add_message(i.message,"success")}).catch(i=>{console.log(i)})}api_reset_password(t){var s={};s.new_password=t;const n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)},o=this.domain_origin+"/admin/reset_password_forgotten";fetch(o,n).then(i=>i.json()).then(i=>{i.rc==0?(this.messages.add_message(i.message,"success"),setTimeout(()=>{location.replace("/login")},5e3)):this.messages.add_message(i.message,"danger")}).catch(i=>{console.log(i)})}check_mfa_authenticator_code(t){return new Promise((s,n)=>{if(this.password_authorised){let o={email:this.email,session_jwt:this.session_jwt,mfa_authenticator_code:t};const i={method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.session_jwt}`},body:JSON.stringify(o)},r=this.domain_origin+"/api/auth/login/mfa";fetch(r,i).then(l=>l.json()).then(l=>{try{localStorage.removeItem("mfa_"+this.email)}catch(c){console.log(c)}try{l.mfa_jwt&&l.rc==0?(this.mfa_authorised=!0,this.mfa_secret_confirmed=!0,this.logged_in=!0,localStorage.setItem("mfa_"+this.email,l.mfa_jwt),s(!0)):(this.mfa_authorised=!1,this.logged_in=!1,localStorage.setItem("mfa_"+this.email,""),s(!1))}catch(c){console.log(c),n(c)}}).catch(l=>{console.log(l),n(l)})}else s(!1)})}getUserFromApi(){if(this.logged_in){var t={};t.session_jwt=this.session_jwt,t.ip_address=this.ip_address,t.mfa_jwt=localStorage.getItem("mfa_"+this.email);const s={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},n=this.domain_origin+"/api_get_user";fetch(n,s).then(o=>o.json()).then(o=>{o.user.logged_in||this.logOut(!0)}).catch(o=>{console.log(o)})}return t}login(){return new Promise((t,s)=>{const n=localStorage.getItem("mfa_"+this.login_email),o=this.domain_origin+"/api/auth/login";console.log(o);const i={email:this.login_email,password:this.login_password,mfa_jwt:n};if(this.logged_in)this.router.push("/");else{const r={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)};fetch(o,r).then(l=>l.json()).then(l=>{if(this.session_jwt=l.session_jwt,l.rc==0){this.messages.add_message(l.message,"success");const c=l.user;c.mfa_authorised?(this.id=c.id,this.role_name=c.role_name,this.logged_in=!0,this.mfa_authorised=!0,this.mfa_secret_confirmed=!0):(this.logged_in=!1,this.mfa_authorised=!1,this.mfa_secret_confirmed=c.mfa_secret_confirmed,this.mfa_qr_code_base64=l.mfa_qr_image),c.password_authorised?(this.password_authorised=!0,this.email=c.email,this.name=c.name,this.session_jwt=c.session_jwt):(this.password_authorised=!1,this.logged_in=!1,this.email="",this.name="",this.id="",this.logout(),this.messages.add_message("Login failed.","danger"),setTimeout(()=>{location.replace("/login")},5e3))}else setTimeout(()=>{location.replace("/login")},5e3),this.messages.add_message("Login failed.","danger");t()}).catch(l=>{console.log(l),s(l)})}console.log("End of user.login()")})}logout(){this.logged_in=!1,this.session_jwt="",this.role_name="",this.email="",this.password_authorised=!1}get_secret_and_image(t){if(this.logged_in){var s={};s.session_jwt=this.session_jwt;const n={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)},o=this.domain_origin+"/api_get_secret_and_image";fetch(o,n).then(i=>i.json()).then(i=>{if(i.rc==0){this.messages.add_message("Us your authenticator app (from Google or Microsoft) to scan the qr-code","success");const r=i.secret,l=i.image;t.secret=r,t.image=l}else this.messages.add_message("There was a slight problem, if you can't proceed, please try again in 5 minutes","danger"),t.secret="Failed in user.js",t.image=""}).catch(i=>{t.secret="",t.image="",console.log(i)})}return s}setlocalStorage(){sessionStorage.setItem("user",JSON.stringify({logged_in:this.logged_in,role_name:this.role_name}))}api_reset_password(t,s){var n={};n.session_jwt=this.session_jwt,n.input=t;const o={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)},i=this.domain_origin+"/api/admin/reset_password_forgotten/"+s;fetch(i,o).then(r=>r.json()).then(r=>{r.rc==0?(this.messages.add_message(r.message,"success"),setTimeout(()=>{location.replace("/login")},5e3)):this.messages.add_message(r.message,"danger")}).catch(r=>{console.log(r)})}check_token_validity(){if(this.logged_in){const t={token:this.session_jwt},s={method:"POST",headers:{"Content-type":"application/json; charset=UTF-8"},body:JSON.stringify(t)},n=this.domain_origin+"/api/auth/check_jwt";fetch(n,s).then(o=>{if(!o.ok)throw Error(o.status);return o.json()}).then(o=>{o.status=="invalid"?this.invalid_token=!0:console.log("Token valid, still logged in.")}).catch(o=>{console.log(o)})}}}class Oc{constructor(t,s,n,o){console.log("Users has been instantiated."),this.messages=s,this.roles=o,this.user=t,this.domain_origin=n,this.user_list=[],this.new_user={},this.new_user.name="",this.new_user.email="",this.new_user.role="",this.user_to_delete="",this.selected_users=[],this.model_name="User",this.role_valid="",this.email_valid="",this.name_valid="",this.password_valid=""}api_create_user_db(){console.log("inside api_create_user_db");let t=this.new_user;const s=this.roles.get_role_from_name(this.new_user.role);t.id=this.generate_token(),t.role_id=s.id,this.selected_users.push(t);const n={};n.new_user_credentials=t;const o={method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`},body:JSON.stringify(n)},i=this.domain_origin+"/api/users/";fetch(i,o).then(r=>r.json()).then(r=>{if(r.rc==0){this.messages.add_message(r.message,"success");const l=r.created_record;t.id=l.id,this.user_list.push(l)}else this.messages.add_message(r.message,"danger"),this.remove_local_selected_user(t.id)}).catch(r=>{console.log(r)})}api_update_user(t,s,n,o,i,r){return new Promise((l,c)=>{const h=[];for(let v in i){const A=i[v];h.push(A.id)}const f={org_ids:h,name:s,cc_emails:o,is_deleted:r,email:n},p={method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`},body:JSON.stringify(f)},_=this.domain_origin+`/api/users/${t}`;fetch(_,p).then(v=>v.json()).then(v=>{try{v.rc==0?l(v.message):c(new Error(v.message))}catch{c(new Error("Failed to update user"))}}).catch(v=>{c(new Error("Failed to update user"))})})}delete_user(t){console.log("inside delete_user method");const s=this.get_selected_user_from_id(t);s.id="";const n={};n.session_jwt=this.user.session_jwt,n.model_name="User";const o={},i={};i.id=t,o.delete_package=i,n.data=o;const r={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)},l=this.domain_origin+"/api_delete_record_db";fetch(l,r).then(c=>c.json()).then(c=>{if(c.rc==0){this.messages.add_message(c.message,"success");for(let h in this.user_list)this.user_list[h].id==t&&this.user_list.splice(h,1)}else this.messages.add_message(c.message,"danger")}).catch(c=>{console.log(c)})}generate_token(t){Number.isFinite(t)?t=t*1:t=12;for(var s="aAbBcCdDeEfFgGhHjJkKmMnNpPqQrRsStTuUvVwWxXyYzZ23456789!&-_",n="£!1Ww",o=0;o<t;o++){var i=Math.floor(Math.random()*s.length);n=n+s[i]}return n}remove_local_selected_user(t){for(let s=0;s<this.selected_users.length;s++)this.selected_users[s].id==t&&this.selected_users.splice(s,1)}populate_user_list(){const t={method:"GET",headers:{"Content-type":"application/json; charset=UTF-8",Authorization:`Bearer ${this.user.session_jwt}`}},s=this.domain_origin+"/api/users/";fetch(s,t).then(n=>{if(!n.ok)throw Error(n.status);return n.json()}).then(n=>{this.user_list=n}).catch(n=>{console.log(n)})}get_selected_user_from_id(t){for(let s=0;s<this.selected_users.length;s++){const n=this.selected_users[s];if(n.id==t)return n}return{}}check_name_valid(t){this.name_valid="";let s=!0;var n=/^[a-zA-Z\s-]+$/;const o=n.test(t);n=/^[a-zA-Z\s]+$/;const i=n.test(t);!o&&!i&&(s=!1),s?this.name_valid="is-valid":this.name_valid="is-invalid"}check_email_valid(t){this.email_valid="",/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(t)?this.email_valid="is-valid":this.email_valid="is-invalid"}check_role_valid(){this.role_valid="is-valid"}check_password_valid(t){this.password_valid="",this.is_strong_enough(t)?this.password_valid="is-valid":this.password_valid="is-invalid"}is_strong_enough(t){let s=!0;t.length<8&&(s=!1),t.length>64&&(s=!1);let n={};for(let c of t)try{n[c]=n[c]+1}catch{n[c]=1}for(let c in n)n[c]/t.length>.5&&(s=!1);Object.keys(n).length<3&&(s=!1);let o=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],i=!1;for(let c of t)if(o.includes(c.toLowerCase())&&c===c.toUpperCase()){i=!0;break}i||(s=!1);let r=!1;for(let c of t)if(o.includes(c.toLowerCase())&&c===c.toLowerCase()){r=!0;break}r||(s=!1);let l=!1;for(let c of t)try{c=parseInt(c),l=!0;break}catch{}return l||(s=!1),s}}class Mc{constructor(){console.log("Messages has been instantiated."),this.message_array=[]}add_message(t,s){let n={};return n.message=t,n.type=s,this.message_array.push(n),this.message_array}}class Ic{constructor(t,s,n){this.user=t,this.messages=s,this.domain_origin=n,this.new_dialogue={},this.new_point="",this.new_question={},this.new_question.text="",this.new_question.time_allotted=0,this.new_question.points=[],this.new_dialogue.title="",this.new_dialogue.description="",this.new_dialogue.question_set=[],this.dialogue_to_edit={},this.dialogue_to_edit.title="",this.dialogue_to_edit.description="",this.dialogue_to_edit.question_set=[],this.dialogue_guide_title="",this.question_set=[],this.dialogue_guides=[],this.dialogue_select_options=[]}remove_point(t){this.new_question.points.splice(t,1)}add_point(){this.new_question.points.push(this.new_point),this.new_point=""}add_question(){this.new_question.text&&this.new_question.time_allotted>0&&this.new_question.points.length>0&&(this.new_dialogue.question_set.push(this.new_question),this.new_question={},this.new_question.text="",this.new_question.time_allotted=0,this.new_question.points=[])}api_create_dialogue_guide(){const t=this.new_dialogue;console.log(t);const s={method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`},body:JSON.stringify(t)},n=this.domain_origin+"/api/dialogue/";this.waiting_for_response=!0,fetch(n,s).then(o=>o.json()).then(o=>{o.rc==0?(this.messages.add_message(o.message,"success"),this.waiting_for_response=!1):(this.messages.add_message(o.message,"danger"),this.waiting_for_response=!1)}).catch(o=>{console.log(o)})}api_delete_guide(t){const s={method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`}},n=this.domain_origin+"/api/dialogue/"+t;return fetch(n,s).then(o=>o.json()).then(o=>{o.rc==0?(this.messages.add_message(o.message,"success"),console.log(this.dialogue_guides)):this.messages.add_message(o.message,"danger")}).catch(o=>{console.log(o)}),!0}api_update_dialogue_guide(t){const s={dialogue_guide_title:t.title,question_set:t.question_set};console.log(s);const n={method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`},body:JSON.stringify(s)},o=this.domain_origin+`/api/dialogue/${t.id}`;this.waiting_for_response=!0,fetch(o,n).then(i=>i.json()).then(i=>{i.rc==0?(this.messages.add_message(i.message,"success"),this.waiting_for_response=!1):(this.messages.add_message(i.message,"danger"),this.waiting_for_response=!1)}).catch(i=>{console.log(i)})}get_dialogue_guides_from_api(){const t=`${this.domain_origin}/api/video_call/dialogues`,s={method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`}};fetch(t,s).then(n=>n.json()).then(n=>{n.rc===0?this.dialogue_guides=n.guides:console.error("Failed to fetch guides:",n.msg)}).catch(n=>{console.error("API Error:",n)})}generate_select_options(){for(let t=0;t<this.dialogue_guides.length;t++)this.dialogue_select_options.push(this.dialogue_guides[t].title)}remove_question(t){this.question_set.splice(t,1)}async load_dialogue(t){for(let s=0;s<this.dialogue_guides.length;s++)if(this.dialogue_guides[s].title===t){this.loaded_dialogue_dict=this.dialogue_guides[s];break}}}const Be=(e,t)=>{const s=e.__vccOpts||e;for(const[n,o]of t)s[n]=o;return s},jc={props:["messages"],methods:{delete_message(e){this.messages.message_array.splice(e,1)}}},Lc={class:"toast toast-end"},Nc={class:"w-5 h-5","aria-hidden":"true",xmlns:"http://www.w3.org/2000/svg",fill:"currentColor",viewBox:"0 0 20 20"},Vc={key:0,d:"M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"},qc={key:1,d:"M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"},Fc={key:2,d:"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"},Uc={key:3,d:"M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"},Hc=u("span",{class:"sr-only"},"Icon",-1),Dc={class:"ml-3 mr-2 text-sm font-normal"},Bc=["onClick"],Kc=u("span",{class:"sr-only"},"Close",-1),zc=u("svg",{class:"w-3 h-3","aria-hidden":"true",xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 14 14"},[u("path",{stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"})],-1),Wc=[Kc,zc];function Gc(e,t,s,n,o,i){return H(),D("div",Lc,[u("ul",null,[(H(!0),D(pe,null,Nt(this.messages.message_array,(r,l)=>(H(),D("li",{key:l,class:"flex items-center w-full max-w-md p-4 mb-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800",role:"alert"},[u("div",{class:He([{"toast-success":r.type==="success","toast-error":r.type==="error","toast-warning":r.type==="danger","toast-info":r.type==="info"},"inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg"])},[(H(),D("svg",Nc,[r.type==="success"?(H(),D("path",Vc)):ce("",!0),r.type==="danger"?(H(),D("path",qc)):ce("",!0),r.type==="error"?(H(),D("path",Fc)):ce("",!0),r.type==="info"?(H(),D("path",Uc)):ce("",!0)])),Hc],2),u("div",Dc,Re(r.message),1),u("button",{type:"button",class:"ml-auto -mx-1.5 -my-1.5 btn btn-sm",onClick:c=>this.delete_message(l)},Wc,8,Bc)]))),128))])])}const Jc=Be(jc,[["render",Gc]]),Ki=""+new URL("dt_squad_logo-13367e92.png",import.meta.url).href;const Qc={props:["user","messages"],data(){return{isNavbarCollapsed:!0,isDropdownOpen:!1}},methods:{toggleNavbarCollapse(){this.isNavbarCollapsed=!this.isNavbarCollapsed},toggleDropdown(){this.isDropdownOpen=!this.isDropdownOpen}}},Zc={class:"bg-white border-gray-200 dark:bg-gray-900 dark:border-gray-700"},Yc={class:"max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4"},Xc=u("img",{src:Ki,alt:"Logo",style:{width:"75px"}},null,-1),ea=u("button",{"data-collapse-toggle":"navbar-dropdown",type:"button",class:"nav-dropdown","aria-controls":"navbar-dropdown","aria-expanded":"false"},[u("svg",{class:"w-5 h-5","aria-hidden":"true",xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 17 14"},[u("path",{stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M1 1h15M1 7h15M1 13h15"})])],-1),ta={class:"hidden w-full md:block md:w-auto",id:"navbar-dropdown"},sa={class:"nav-list"};function na(e,t,s,n,o,i){const r=bt("router-link"),l=bt("RouterLink");return H(),D("nav",Zc,[u("div",Yc,[ne(r,{class:"navbar-brand",to:"/"},{default:mt(()=>[Xc]),_:1}),ea,u("div",ta,[u("ul",sa,[u("li",null,[ne(l,{to:"/",class:"nav-link"},{default:mt(()=>[ue("Home")]),_:1})]),u("li",null,[ne(l,{to:"/transcript_search",class:"nav-link"},{default:mt(()=>[ue("Search Chats")]),_:1})]),u("li",null,[ne(l,{to:"/crud",class:"nav-link"},{default:mt(()=>[ue("Manage Users")]),_:1})]),u("li",null,[ne(l,{to:"/dialogue",class:"nav-link"},{default:mt(()=>[ue("Manage Dialogues")]),_:1})])])])])])}const oa=Be(Qc,[["render",na]]);class ia{constructor(t,s){this.objectName="Roles",this.model_name="Role",this.domain_origin=t,this.user=s,this.roles=[],this.test="hey there from Roles",this.counter=0}get_roles_from_api(){const t=this.domain_origin+"/api/users/roles",s={method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.user.session_jwt}`}};fetch(t,s).then(n=>n.json()).then(n=>{n.rc==0&&(this.roles=n.records)}).catch(n=>{console.log(n)})}get_roles(){return this.roles}get_role_from_id(t){for(let s=0;s<this.roles.length;s++){const n=this.roles[s];if(n.id==t)return n}return{}}get_role_from_name(t){for(let s=0;s<this.roles.length;s++){const n=this.roles[s];if(n.name==t)return n}return{}}}const ra={data(){return{users:{},user:{},messages:{},roles:{},dialogue_guide:{}}},created(){let e=window.location.origin;e.slice(-5)==":5173"&&(e=e.replace(":5173",":5000"));const t=We(new Mc),s=We(new Tc(t,e)),n=We(new ia(e,s)),o=We(new Oc(s,t,e,n)),i=We(new Ic(s,t,e));this.user=s,this.roles=n,this.users=o,this.messages=t,this.dialogue_guide=i,this.check_invalid_token(),this.check_token_validity()},components:{MessageDisplay:Jc,Navbar:oa},methods:{check_invalid_token(){this.user.invalid_token==!0&&(this.user.logout(),this.messages.add_message("Session expired, please login.","danger"),this.$router.push({name:"login"}),this.user.logged_in=!1,this.user.invalid_token=!1),setTimeout(this.check_invalid_token,2e3)},check_token_validity(){this.user.logged_in==!0&&this.user.check_token_validity(),setTimeout(this.check_token_validity,3e4)},vue_refresh(){try{this.needs_vue_refresh.data=this.user.ip_address}catch{}this.needs_vue_refresh.keep_looping&&setTimeout(this.vue_refresh,500)},check_logged_in(){!this.user.logged_in&&this.$router.name!="passwordreset"&&this.$router.push("login"),setTimeout(this.check_logged_in,5e3)}}},la={class:"min-w-full min-h-full flex flex-col justify-between"},ca=u("div",null,[u("br"),ue(),u("br"),ue(),u("br")],-1),aa={class:"fixed bottom-0 w-full bg-gray-900 text-white py-1",style:{"z-index":"9999"}},ua=u("hr",{class:"mx-4 my-1"},null,-1),da=u("div",{class:"flex justify-between"},[u("p",{class:"mx-3 my-1"}," For support, please email us at: support@thebigteam.co.uk "),u("p",{class:"mx-3 my-1"},[u("i",{className:"icon bi-c-circle ms-0 ps-0",style:{"font-size":"1.0rem"}}),ue(" 2023 - dt-squad Ltd  ")])],-1),fa=u("hr",{class:"mx-4 my-1"},null,-1);function ha(e,t,s,n,o,i){const r=bt("Navbar"),l=bt("RouterView"),c=bt("MessageDisplay");return H(),D("div",la,[this.user.logged_in?(H(),jn(r,{key:0,user:o.user,messages:o.messages,roles:o.roles},null,8,["user","messages","roles"])):ce("",!0),ne(l,{users:o.users,user:o.user,roles:o.roles,messages:o.messages,dialogue_guide:o.dialogue_guide},null,8,["users","user","roles","messages","dialogue_guide"]),ca,u("footer",aa,[ne(c,{messages:o.messages},null,8,["messages"]),ua,da,fa])])}const pa=Be(ra,[["render",ha]]);/*!
  * vue-router v4.3.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const Tt=typeof document<"u";function _a(e){return e.__esModule||e[Symbol.toStringTag]==="Module"}const Q=Object.assign;function Ys(e,t){const s={};for(const n in t){const o=t[n];s[n]=Ie(o)?o.map(e):e(o)}return s}const Xt=()=>{},Ie=Array.isArray,zi=/#/g,ga=/&/g,ma=/\//g,ya=/=/g,va=/\?/g,Wi=/\+/g,wa=/%5B/g,ba=/%5D/g,Gi=/%5E/g,xa=/%60/g,Ji=/%7B/g,Ca=/%7C/g,Qi=/%7D/g,Ea=/%20/g;function Nn(e){return encodeURI(""+e).replace(Ca,"|").replace(wa,"[").replace(ba,"]")}function Ra(e){return Nn(e).replace(Ji,"{").replace(Qi,"}").replace(Gi,"^")}function pn(e){return Nn(e).replace(Wi,"%2B").replace(Ea,"+").replace(zi,"%23").replace(ga,"%26").replace(xa,"`").replace(Ji,"{").replace(Qi,"}").replace(Gi,"^")}function $a(e){return pn(e).replace(ya,"%3D")}function Sa(e){return Nn(e).replace(zi,"%23").replace(va,"%3F")}function ka(e){return e==null?"":Sa(e).replace(ma,"%2F")}function rs(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const Aa=/\/$/,Pa=e=>e.replace(Aa,"");function Xs(e,t,s="/"){let n,o={},i="",r="";const l=t.indexOf("#");let c=t.indexOf("?");return l<c&&l>=0&&(c=-1),c>-1&&(n=t.slice(0,c),i=t.slice(c+1,l>-1?l:t.length),o=e(i)),l>-1&&(n=n||t.slice(0,l),r=t.slice(l,t.length)),n=Ia(n??t,s),{fullPath:n+(i&&"?")+i+r,path:n,query:o,hash:rs(r)}}function Ta(e,t){const s=t.query?e(t.query):"";return t.path+(s&&"?")+s+(t.hash||"")}function $o(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function Oa(e,t,s){const n=t.matched.length-1,o=s.matched.length-1;return n>-1&&n===o&&Ut(t.matched[n],s.matched[o])&&Zi(t.params,s.params)&&e(t.query)===e(s.query)&&t.hash===s.hash}function Ut(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function Zi(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const s in e)if(!Ma(e[s],t[s]))return!1;return!0}function Ma(e,t){return Ie(e)?So(e,t):Ie(t)?So(t,e):e===t}function So(e,t){return Ie(t)?e.length===t.length&&e.every((s,n)=>s===t[n]):e.length===1&&e[0]===t}function Ia(e,t){if(e.startsWith("/"))return e;if(!e)return t;const s=t.split("/"),n=e.split("/"),o=n[n.length-1];(o===".."||o===".")&&n.push("");let i=s.length-1,r,l;for(r=0;r<n.length;r++)if(l=n[r],l!==".")if(l==="..")i>1&&i--;else break;return s.slice(0,i).join("/")+"/"+n.slice(r).join("/")}var ls;(function(e){e.pop="pop",e.push="push"})(ls||(ls={}));var es;(function(e){e.back="back",e.forward="forward",e.unknown=""})(es||(es={}));function ja(e){if(!e)if(Tt){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),Pa(e)}const La=/^[^#]+#/;function Na(e,t){return e.replace(La,"#")+t}function Va(e,t){const s=document.documentElement.getBoundingClientRect(),n=e.getBoundingClientRect();return{behavior:t.behavior,left:n.left-s.left-(t.left||0),top:n.top-s.top-(t.top||0)}}const Ds=()=>({left:window.scrollX,top:window.scrollY});function qa(e){let t;if("el"in e){const s=e.el,n=typeof s=="string"&&s.startsWith("#"),o=typeof s=="string"?n?document.getElementById(s.slice(1)):document.querySelector(s):s;if(!o)return;t=Va(o,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.scrollX,t.top!=null?t.top:window.scrollY)}function ko(e,t){return(history.state?history.state.position-t:-1)+e}const _n=new Map;function Fa(e,t){_n.set(e,t)}function Ua(e){const t=_n.get(e);return _n.delete(e),t}let Ha=()=>location.protocol+"//"+location.host;function Yi(e,t){const{pathname:s,search:n,hash:o}=t,i=e.indexOf("#");if(i>-1){let l=o.includes(e.slice(i))?e.slice(i).length:1,c=o.slice(l);return c[0]!=="/"&&(c="/"+c),$o(c,"")}return $o(s,e)+n+o}function Da(e,t,s,n){let o=[],i=[],r=null;const l=({state:_})=>{const v=Yi(e,location),A=s.value,I=t.value;let V=0;if(_){if(s.value=v,t.value=_,r&&r===A){r=null;return}V=I?_.position-I.position:0}else n(v);o.forEach(T=>{T(s.value,A,{delta:V,type:ls.pop,direction:V?V>0?es.forward:es.back:es.unknown})})};function c(){r=s.value}function h(_){o.push(_);const v=()=>{const A=o.indexOf(_);A>-1&&o.splice(A,1)};return i.push(v),v}function f(){const{history:_}=window;_.state&&_.replaceState(Q({},_.state,{scroll:Ds()}),"")}function p(){for(const _ of i)_();i=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",f)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",f,{passive:!0}),{pauseListeners:c,listen:h,destroy:p}}function Ao(e,t,s,n=!1,o=!1){return{back:e,current:t,forward:s,replaced:n,position:window.history.length,scroll:o?Ds():null}}function Ba(e){const{history:t,location:s}=window,n={value:Yi(e,s)},o={value:t.state};o.value||i(n.value,{back:null,current:n.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(c,h,f){const p=e.indexOf("#"),_=p>-1?(s.host&&document.querySelector("base")?e:e.slice(p))+c:Ha()+e+c;try{t[f?"replaceState":"pushState"](h,"",_),o.value=h}catch(v){console.error(v),s[f?"replace":"assign"](_)}}function r(c,h){const f=Q({},t.state,Ao(o.value.back,c,o.value.forward,!0),h,{position:o.value.position});i(c,f,!0),n.value=c}function l(c,h){const f=Q({},o.value,t.state,{forward:c,scroll:Ds()});i(f.current,f,!0);const p=Q({},Ao(n.value,c,null),{position:f.position+1},h);i(c,p,!1),n.value=c}return{location:n,state:o,push:l,replace:r}}function Ka(e){e=ja(e);const t=Ba(e),s=Da(e,t.state,t.location,t.replace);function n(i,r=!0){r||s.pauseListeners(),history.go(i)}const o=Q({location:"",base:e,go:n,createHref:Na.bind(null,e)},t,s);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function za(e){return typeof e=="string"||e&&typeof e=="object"}function Xi(e){return typeof e=="string"||typeof e=="symbol"}const st={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},er=Symbol("");var Po;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(Po||(Po={}));function Ht(e,t){return Q(new Error,{type:e,[er]:!0},t)}function ze(e,t){return e instanceof Error&&er in e&&(t==null||!!(e.type&t))}const To="[^/]+?",Wa={sensitive:!1,strict:!1,start:!0,end:!0},Ga=/[.+*?^${}()[\]/\\]/g;function Ja(e,t){const s=Q({},Wa,t),n=[];let o=s.start?"^":"";const i=[];for(const h of e){const f=h.length?[]:[90];s.strict&&!h.length&&(o+="/");for(let p=0;p<h.length;p++){const _=h[p];let v=40+(s.sensitive?.25:0);if(_.type===0)p||(o+="/"),o+=_.value.replace(Ga,"\\$&"),v+=40;else if(_.type===1){const{value:A,repeatable:I,optional:V,regexp:T}=_;i.push({name:A,repeatable:I,optional:V});const L=T||To;if(L!==To){v+=10;try{new RegExp(`(${L})`)}catch(W){throw new Error(`Invalid custom RegExp for param "${A}" (${L}): `+W.message)}}let F=I?`((?:${L})(?:/(?:${L}))*)`:`(${L})`;p||(F=V&&h.length<2?`(?:/${F})`:"/"+F),V&&(F+="?"),o+=F,v+=20,V&&(v+=-8),I&&(v+=-20),L===".*"&&(v+=-50)}f.push(v)}n.push(f)}if(s.strict&&s.end){const h=n.length-1;n[h][n[h].length-1]+=.7000000000000001}s.strict||(o+="/?"),s.end?o+="$":s.strict&&(o+="(?:/|$)");const r=new RegExp(o,s.sensitive?"":"i");function l(h){const f=h.match(r),p={};if(!f)return null;for(let _=1;_<f.length;_++){const v=f[_]||"",A=i[_-1];p[A.name]=v&&A.repeatable?v.split("/"):v}return p}function c(h){let f="",p=!1;for(const _ of e){(!p||!f.endsWith("/"))&&(f+="/"),p=!1;for(const v of _)if(v.type===0)f+=v.value;else if(v.type===1){const{value:A,repeatable:I,optional:V}=v,T=A in h?h[A]:"";if(Ie(T)&&!I)throw new Error(`Provided param "${A}" is an array but it is not repeatable (* or + modifiers)`);const L=Ie(T)?T.join("/"):T;if(!L)if(V)_.length<2&&(f.endsWith("/")?f=f.slice(0,-1):p=!0);else throw new Error(`Missing required param "${A}"`);f+=L}}return f||"/"}return{re:r,score:n,keys:i,parse:l,stringify:c}}function Qa(e,t){let s=0;for(;s<e.length&&s<t.length;){const n=t[s]-e[s];if(n)return n;s++}return e.length<t.length?e.length===1&&e[0]===40+40?-1:1:e.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function Za(e,t){let s=0;const n=e.score,o=t.score;for(;s<n.length&&s<o.length;){const i=Qa(n[s],o[s]);if(i)return i;s++}if(Math.abs(o.length-n.length)===1){if(Oo(n))return 1;if(Oo(o))return-1}return o.length-n.length}function Oo(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const Ya={type:0,value:""},Xa=/[a-zA-Z0-9_]/;function eu(e){if(!e)return[[]];if(e==="/")return[[Ya]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(v){throw new Error(`ERR (${s})/"${h}": ${v}`)}let s=0,n=s;const o=[];let i;function r(){i&&o.push(i),i=[]}let l=0,c,h="",f="";function p(){h&&(s===0?i.push({type:0,value:h}):s===1||s===2||s===3?(i.length>1&&(c==="*"||c==="+")&&t(`A repeatable param (${h}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:h,regexp:f,repeatable:c==="*"||c==="+",optional:c==="*"||c==="?"})):t("Invalid state to consume buffer"),h="")}function _(){h+=c}for(;l<e.length;){if(c=e[l++],c==="\\"&&s!==2){n=s,s=4;continue}switch(s){case 0:c==="/"?(h&&p(),r()):c===":"?(p(),s=1):_();break;case 4:_(),s=n;break;case 1:c==="("?s=2:Xa.test(c)?_():(p(),s=0,c!=="*"&&c!=="?"&&c!=="+"&&l--);break;case 2:c===")"?f[f.length-1]=="\\"?f=f.slice(0,-1)+c:s=3:f+=c;break;case 3:p(),s=0,c!=="*"&&c!=="?"&&c!=="+"&&l--,f="";break;default:t("Unknown state");break}}return s===2&&t(`Unfinished custom RegExp for param "${h}"`),p(),r(),o}function tu(e,t,s){const n=Ja(eu(e.path),s),o=Q(n,{record:e,parent:t,children:[],alias:[]});return t&&!o.record.aliasOf==!t.record.aliasOf&&t.children.push(o),o}function su(e,t){const s=[],n=new Map;t=jo({strict:!1,end:!0,sensitive:!1},t);function o(f){return n.get(f)}function i(f,p,_){const v=!_,A=nu(f);A.aliasOf=_&&_.record;const I=jo(t,f),V=[A];if("alias"in f){const F=typeof f.alias=="string"?[f.alias]:f.alias;for(const W of F)V.push(Q({},A,{components:_?_.record.components:A.components,path:W,aliasOf:_?_.record:A}))}let T,L;for(const F of V){const{path:W}=F;if(p&&W[0]!=="/"){const oe=p.record.path,U=oe[oe.length-1]==="/"?"":"/";F.path=p.record.path+(W&&U+W)}if(T=tu(F,p,I),_?_.alias.push(T):(L=L||T,L!==T&&L.alias.push(T),v&&f.name&&!Io(T)&&r(f.name)),A.children){const oe=A.children;for(let U=0;U<oe.length;U++)i(oe[U],T,_&&_.children[U])}_=_||T,(T.record.components&&Object.keys(T.record.components).length||T.record.name||T.record.redirect)&&c(T)}return L?()=>{r(L)}:Xt}function r(f){if(Xi(f)){const p=n.get(f);p&&(n.delete(f),s.splice(s.indexOf(p),1),p.children.forEach(r),p.alias.forEach(r))}else{const p=s.indexOf(f);p>-1&&(s.splice(p,1),f.record.name&&n.delete(f.record.name),f.children.forEach(r),f.alias.forEach(r))}}function l(){return s}function c(f){let p=0;for(;p<s.length&&Za(f,s[p])>=0&&(f.record.path!==s[p].record.path||!tr(f,s[p]));)p++;s.splice(p,0,f),f.record.name&&!Io(f)&&n.set(f.record.name,f)}function h(f,p){let _,v={},A,I;if("name"in f&&f.name){if(_=n.get(f.name),!_)throw Ht(1,{location:f});I=_.record.name,v=Q(Mo(p.params,_.keys.filter(L=>!L.optional).concat(_.parent?_.parent.keys.filter(L=>L.optional):[]).map(L=>L.name)),f.params&&Mo(f.params,_.keys.map(L=>L.name))),A=_.stringify(v)}else if(f.path!=null)A=f.path,_=s.find(L=>L.re.test(A)),_&&(v=_.parse(A),I=_.record.name);else{if(_=p.name?n.get(p.name):s.find(L=>L.re.test(p.path)),!_)throw Ht(1,{location:f,currentLocation:p});I=_.record.name,v=Q({},p.params,f.params),A=_.stringify(v)}const V=[];let T=_;for(;T;)V.unshift(T.record),T=T.parent;return{name:I,path:A,params:v,matched:V,meta:iu(V)}}return e.forEach(f=>i(f)),{addRoute:i,resolve:h,removeRoute:r,getRoutes:l,getRecordMatcher:o}}function Mo(e,t){const s={};for(const n of t)n in e&&(s[n]=e[n]);return s}function nu(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:ou(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}function ou(e){const t={},s=e.props||!1;if("component"in e)t.default=s;else for(const n in e.components)t[n]=typeof s=="object"?s[n]:s;return t}function Io(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function iu(e){return e.reduce((t,s)=>Q(t,s.meta),{})}function jo(e,t){const s={};for(const n in e)s[n]=n in t?t[n]:e[n];return s}function tr(e,t){return t.children.some(s=>s===e||tr(e,s))}function ru(e){const t={};if(e===""||e==="?")return t;const n=(e[0]==="?"?e.slice(1):e).split("&");for(let o=0;o<n.length;++o){const i=n[o].replace(Wi," "),r=i.indexOf("="),l=rs(r<0?i:i.slice(0,r)),c=r<0?null:rs(i.slice(r+1));if(l in t){let h=t[l];Ie(h)||(h=t[l]=[h]),h.push(c)}else t[l]=c}return t}function Lo(e){let t="";for(let s in e){const n=e[s];if(s=$a(s),n==null){n!==void 0&&(t+=(t.length?"&":"")+s);continue}(Ie(n)?n.map(i=>i&&pn(i)):[n&&pn(n)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+s,i!=null&&(t+="="+i))})}return t}function lu(e){const t={};for(const s in e){const n=e[s];n!==void 0&&(t[s]=Ie(n)?n.map(o=>o==null?null:""+o):n==null?n:""+n)}return t}const cu=Symbol(""),No=Symbol(""),Vn=Symbol(""),sr=Symbol(""),gn=Symbol("");function Wt(){let e=[];function t(n){return e.push(n),()=>{const o=e.indexOf(n);o>-1&&e.splice(o,1)}}function s(){e=[]}return{add:t,list:()=>e.slice(),reset:s}}function rt(e,t,s,n,o,i=r=>r()){const r=n&&(n.enterCallbacks[o]=n.enterCallbacks[o]||[]);return()=>new Promise((l,c)=>{const h=_=>{_===!1?c(Ht(4,{from:s,to:t})):_ instanceof Error?c(_):za(_)?c(Ht(2,{from:t,to:_})):(r&&n.enterCallbacks[o]===r&&typeof _=="function"&&r.push(_),l())},f=i(()=>e.call(n&&n.instances[o],t,s,h));let p=Promise.resolve(f);e.length<3&&(p=p.then(h)),p.catch(_=>c(_))})}function en(e,t,s,n,o=i=>i()){const i=[];for(const r of e)for(const l in r.components){let c=r.components[l];if(!(t!=="beforeRouteEnter"&&!r.instances[l]))if(au(c)){const f=(c.__vccOpts||c)[t];f&&i.push(rt(f,s,n,r,l,o))}else{let h=c();i.push(()=>h.then(f=>{if(!f)return Promise.reject(new Error(`Couldn't resolve component "${l}" at "${r.path}"`));const p=_a(f)?f.default:f;r.components[l]=p;const v=(p.__vccOpts||p)[t];return v&&rt(v,s,n,r,l,o)()}))}}return i}function au(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function Vo(e){const t=Qe(Vn),s=Qe(sr),n=Te(()=>t.resolve(jt(e.to))),o=Te(()=>{const{matched:c}=n.value,{length:h}=c,f=c[h-1],p=s.matched;if(!f||!p.length)return-1;const _=p.findIndex(Ut.bind(null,f));if(_>-1)return _;const v=qo(c[h-2]);return h>1&&qo(f)===v&&p[p.length-1].path!==v?p.findIndex(Ut.bind(null,c[h-2])):_}),i=Te(()=>o.value>-1&&hu(s.params,n.value.params)),r=Te(()=>o.value>-1&&o.value===s.matched.length-1&&Zi(s.params,n.value.params));function l(c={}){return fu(c)?t[jt(e.replace)?"replace":"push"](jt(e.to)).catch(Xt):Promise.resolve()}return{route:n,href:Te(()=>n.value.href),isActive:i,isExactActive:r,navigate:l}}const uu=Ei({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Vo,setup(e,{slots:t}){const s=We(Vo(e)),{options:n}=Qe(Vn),o=Te(()=>({[Fo(e.activeClass,n.linkActiveClass,"router-link-active")]:s.isActive,[Fo(e.exactActiveClass,n.linkExactActiveClass,"router-link-exact-active")]:s.isExactActive}));return()=>{const i=t.default&&t.default(s);return e.custom?i:Ui("a",{"aria-current":s.isExactActive?e.ariaCurrentValue:null,href:s.href,onClick:s.navigate,class:o.value},i)}}}),du=uu;function fu(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function hu(e,t){for(const s in t){const n=t[s],o=e[s];if(typeof n=="string"){if(n!==o)return!1}else if(!Ie(o)||o.length!==n.length||n.some((i,r)=>i!==o[r]))return!1}return!0}function qo(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const Fo=(e,t,s)=>e??t??s,pu=Ei({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:s}){const n=Qe(gn),o=Te(()=>e.route||n.value),i=Qe(No,0),r=Te(()=>{let h=jt(i);const{matched:f}=o.value;let p;for(;(p=f[h])&&!p.components;)h++;return h}),l=Te(()=>o.value.matched[r.value]);xs(No,Te(()=>r.value+1)),xs(cu,l),xs(gn,o);const c=qr();return ws(()=>[c.value,l.value,e.name],([h,f,p],[_,v,A])=>{f&&(f.instances[p]=h,v&&v!==f&&h&&h===_&&(f.leaveGuards.size||(f.leaveGuards=v.leaveGuards),f.updateGuards.size||(f.updateGuards=v.updateGuards))),h&&f&&(!v||!Ut(f,v)||!_)&&(f.enterCallbacks[p]||[]).forEach(I=>I(h))},{flush:"post"}),()=>{const h=o.value,f=e.name,p=l.value,_=p&&p.components[f];if(!_)return Uo(s.default,{Component:_,route:h});const v=p.props[f],A=v?v===!0?h.params:typeof v=="function"?v(h):v:null,V=Ui(_,Q({},A,t,{onVnodeUnmounted:T=>{T.component.isUnmounted&&(p.instances[f]=null)},ref:c}));return Uo(s.default,{Component:V,route:h})||V}}});function Uo(e,t){if(!e)return null;const s=e(t);return s.length===1?s[0]:s}const _u=pu;function gu(e){const t=su(e.routes,e),s=e.parseQuery||ru,n=e.stringifyQuery||Lo,o=e.history,i=Wt(),r=Wt(),l=Wt(),c=Fr(st);let h=st;Tt&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const f=Ys.bind(null,y=>""+y),p=Ys.bind(null,ka),_=Ys.bind(null,rs);function v(y,S){let R,P;return Xi(y)?(R=t.getRecordMatcher(y),P=S):P=y,t.addRoute(P,R)}function A(y){const S=t.getRecordMatcher(y);S&&t.removeRoute(S)}function I(){return t.getRoutes().map(y=>y.record)}function V(y){return!!t.getRecordMatcher(y)}function T(y,S){if(S=Q({},S||c.value),typeof y=="string"){const d=Xs(s,y,S.path),g=t.resolve({path:d.path},S),w=o.createHref(d.fullPath);return Q(d,g,{params:_(g.params),hash:rs(d.hash),redirectedFrom:void 0,href:w})}let R;if(y.path!=null)R=Q({},y,{path:Xs(s,y.path,S.path).path});else{const d=Q({},y.params);for(const g in d)d[g]==null&&delete d[g];R=Q({},y,{params:p(d)}),S.params=p(S.params)}const P=t.resolve(R,S),J=y.hash||"";P.params=f(_(P.params));const te=Ta(n,Q({},y,{hash:Ra(J),path:P.path})),a=o.createHref(te);return Q({fullPath:te,hash:J,query:n===Lo?lu(y.query):y.query||{}},P,{redirectedFrom:void 0,href:a})}function L(y){return typeof y=="string"?Xs(s,y,c.value.path):Q({},y)}function F(y,S){if(h!==y)return Ht(8,{from:S,to:y})}function W(y){return me(y)}function oe(y){return W(Q(L(y),{replace:!0}))}function U(y){const S=y.matched[y.matched.length-1];if(S&&S.redirect){const{redirect:R}=S;let P=typeof R=="function"?R(y):R;return typeof P=="string"&&(P=P.includes("?")||P.includes("#")?P=L(P):{path:P},P.params={}),Q({query:y.query,hash:y.hash,params:P.path!=null?{}:y.params},P)}}function me(y,S){const R=h=T(y),P=c.value,J=y.state,te=y.force,a=y.replace===!0,d=U(R);if(d)return me(Q(L(d),{state:typeof d=="object"?Q({},J,d.state):J,force:te,replace:a}),S||R);const g=R;g.redirectedFrom=S;let w;return!te&&Oa(n,P,R)&&(w=Ht(16,{to:g,from:P}),Ne(P,P,!0,!1)),(w?Promise.resolve(w):je(g,P)).catch(m=>ze(m)?ze(m,2)?m:et(m):G(m,g,P)).then(m=>{if(m){if(ze(m,2))return me(Q({replace:a},L(m.to),{state:typeof m.to=="object"?Q({},J,m.to.state):J,force:te}),S||g)}else m=ht(g,P,!0,a,J);return Xe(g,P,m),m})}function Se(y,S){const R=F(y,S);return R?Promise.reject(R):Promise.resolve()}function ft(y){const S=At.values().next().value;return S&&typeof S.runWithContext=="function"?S.runWithContext(y):y()}function je(y,S){let R;const[P,J,te]=mu(y,S);R=en(P.reverse(),"beforeRouteLeave",y,S);for(const d of P)d.leaveGuards.forEach(g=>{R.push(rt(g,y,S))});const a=Se.bind(null,y,S);return R.push(a),fe(R).then(()=>{R=[];for(const d of i.list())R.push(rt(d,y,S));return R.push(a),fe(R)}).then(()=>{R=en(J,"beforeRouteUpdate",y,S);for(const d of J)d.updateGuards.forEach(g=>{R.push(rt(g,y,S))});return R.push(a),fe(R)}).then(()=>{R=[];for(const d of te)if(d.beforeEnter)if(Ie(d.beforeEnter))for(const g of d.beforeEnter)R.push(rt(g,y,S));else R.push(rt(d.beforeEnter,y,S));return R.push(a),fe(R)}).then(()=>(y.matched.forEach(d=>d.enterCallbacks={}),R=en(te,"beforeRouteEnter",y,S,ft),R.push(a),fe(R))).then(()=>{R=[];for(const d of r.list())R.push(rt(d,y,S));return R.push(a),fe(R)}).catch(d=>ze(d,8)?d:Promise.reject(d))}function Xe(y,S,R){l.list().forEach(P=>ft(()=>P(y,S,R)))}function ht(y,S,R,P,J){const te=F(y,S);if(te)return te;const a=S===st,d=Tt?history.state:{};R&&(P||a?o.replace(y.fullPath,Q({scroll:a&&d&&d.scroll},J)):o.push(y.fullPath,J)),c.value=y,Ne(y,S,R,a),et()}let Le;function Bt(){Le||(Le=o.listen((y,S,R)=>{if(!us.listening)return;const P=T(y),J=U(P);if(J){me(Q(J,{replace:!0}),P).catch(Xt);return}h=P;const te=c.value;Tt&&Fa(ko(te.fullPath,R.delta),Ds()),je(P,te).catch(a=>ze(a,12)?a:ze(a,2)?(me(a.to,P).then(d=>{ze(d,20)&&!R.delta&&R.type===ls.pop&&o.go(-1,!1)}).catch(Xt),Promise.reject()):(R.delta&&o.go(-R.delta,!1),G(a,P,te))).then(a=>{a=a||ht(P,te,!1),a&&(R.delta&&!ze(a,8)?o.go(-R.delta,!1):R.type===ls.pop&&ze(a,20)&&o.go(-1,!1)),Xe(P,te,a)}).catch(Xt)}))}let St=Wt(),re=Wt(),Z;function G(y,S,R){et(y);const P=re.list();return P.length?P.forEach(J=>J(y,S,R)):console.error(y),Promise.reject(y)}function Ke(){return Z&&c.value!==st?Promise.resolve():new Promise((y,S)=>{St.add([y,S])})}function et(y){return Z||(Z=!y,Bt(),St.list().forEach(([S,R])=>y?R(y):S()),St.reset()),y}function Ne(y,S,R,P){const{scrollBehavior:J}=e;if(!Tt||!J)return Promise.resolve();const te=!R&&Ua(ko(y.fullPath,0))||(P||!R)&&history.state&&history.state.scroll||null;return Tn().then(()=>J(y,S,te)).then(a=>a&&qa(a)).catch(a=>G(a,y,S))}const ve=y=>o.go(y);let kt;const At=new Set,us={currentRoute:c,listening:!0,addRoute:v,removeRoute:A,hasRoute:V,getRoutes:I,resolve:T,options:e,push:W,replace:oe,go:ve,back:()=>ve(-1),forward:()=>ve(1),beforeEach:i.add,beforeResolve:r.add,afterEach:l.add,onError:re.add,isReady:Ke,install(y){const S=this;y.component("RouterLink",du),y.component("RouterView",_u),y.config.globalProperties.$router=S,Object.defineProperty(y.config.globalProperties,"$route",{enumerable:!0,get:()=>jt(c)}),Tt&&!kt&&c.value===st&&(kt=!0,W(o.location).catch(J=>{}));const R={};for(const J in st)Object.defineProperty(R,J,{get:()=>c.value[J],enumerable:!0});y.provide(Vn,S),y.provide(sr,ri(R)),y.provide(gn,c);const P=y.unmount;At.add(y),y.unmount=function(){At.delete(y),At.size<1&&(h=st,Le&&Le(),Le=null,c.value=st,kt=!1,Z=!1),P()}}};function fe(y){return y.reduce((S,R)=>S.then(()=>ft(R)),Promise.resolve())}return us}function mu(e,t){const s=[],n=[],o=[],i=Math.max(t.matched.length,e.matched.length);for(let r=0;r<i;r++){const l=t.matched[r];l&&(e.matched.find(h=>Ut(h,l))?n.push(l):s.push(l));const c=e.matched[r];c&&(t.matched.find(h=>Ut(h,c))||o.push(c))}return[s,n,o]}const yu={data(){return{needsVueRefresh:{data:!1,keepLooping:!1}}},methods:{add_user(){this.users.api_create_user_db()},vueRefresh(){["super user","ho user","support"].includes(this.user.role_name)&&this.user.logged_in||this.$router.push("login"),this.needsVueRefresh.keepLooping&&setTimeout(this.vueRefresh,500)}},props:["users","user","roles"],created(){this.needsVueRefresh.keepLooping=!0,this.vueRefresh(),this.users.populate_user_list(),this.roles.get_roles_from_api()},beforeUnmount(){this.needsVueRefresh.keepLooping=!1}},vu={class:"flex flex-col items-center bg-white shadow-md rounded-lg overflow-hidden p-6"},wu=u("h1",{class:"text-4xl font-bold mb-4"},"Add Users",-1),bu={class:"w-1/2"},xu={class:"relative mb-4"},Cu=u("label",{for:"name",class:"absolute top-0 left-0 px-1 -mt-px text-gray-700 bg-white"},"Name",-1),Eu={class:"relative mb-4"},Ru=u("label",{for:"email",class:"absolute top-0 left-0 px-1 -mt-px text-gray-700 bg-white"},"Email address",-1),$u={class:"mb-4"},Su=u("option",{value:"",disabled:""},"Select the role",-1),ku=u("option",{value:"user"},"User",-1),Au=u("option",{value:"support"},"Support",-1),Pu=u("option",{value:"ho user"},"ho user",-1),Tu=[Su,ku,Au,Pu],Ou={class:"mt-8"},Mu={class:"flex flex-wrap"},Iu={class:"w-full"},ju={class:"min-w-full divide-y divide-gray-200 table-auto"},Lu=u("thead",{class:"bg-gray-800 text-white"},[u("tr",null,[u("th",{scope:"col",class:"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"},"Id #"),u("th",{scope:"col",class:"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"},"Name"),u("th",{scope:"col",class:"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"},"Email"),u("th",{scope:"col",class:"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"},"Actions")])],-1),Nu={class:"bg-white divide-y divide-gray-200"},Vu={class:"px-6 py-4 whitespace-nowrap"},qu={class:"px-6 py-4 whitespace-nowrap"},Fu={class:"px-6 py-4 whitespace-nowrap"},Uu={class:"px-6 py-4 whitespace-nowrap"},Hu=u("button",{type:"button",class:"text-sm bg-green-500 hover:bg-green-700 text-white py-1 px-2 rounded"},[u("i",{class:"bi bi-pencil-square"}),ue(" | Edit ")],-1),Du=["onClick"],Bu=u("i",{class:"bi bi-trash"},null,-1),Ku=u("button",{type:"button",class:"btn btn-primary"},[u("i",{class:"bi bi-unlock"}),ue(" | Unlock")],-1),zu=u("button",{type:"button",class:"btn btn-warning"},[u("i",{class:"bi bi-shield-lock"}),ue(" | Reset MFA")],-1);function Wu(e,t,s,n,o,i){return H(),D(pe,null,[u("div",vu,[wu,u("form",bu,[u("div",xu,[ae(u("input",{type:"text",id:"name",class:He(["form-input mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50",this.users.name_valid]),"onUpdate:modelValue":t[0]||(t[0]=r=>this.users.new_user.name=r),onChange:t[1]||(t[1]=r=>this.users.check_name_valid(this.users.new_user.name))},null,34),[[he,this.users.new_user.name]]),Cu]),u("div",Eu,[ae(u("input",{type:"text",id:"email",class:He(["form-input mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50",this.users.email_valid]),"onUpdate:modelValue":t[2]||(t[2]=r=>this.users.new_user.email=r),onChange:t[3]||(t[3]=r=>this.users.check_email_valid(this.users.new_user.email))},null,34),[[he,this.users.new_user.email]]),Ru]),u("div",$u,[ae(u("select",{class:He(["form-select mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50",this.role_valid]),onChange:t[4]||(t[4]=r=>this.users.check_role_valid()),"aria-label":"Role","onUpdate:modelValue":t[5]||(t[5]=r=>this.users.new_user.role=r)},Tu,34),[[Di,this.users.new_user.role]])]),u("button",{type:"button",class:"w-full bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700 mb-4",onClick:t[6]||(t[6]=r=>{this.add_user(),this.users.populate_user_list()})}," Create user ")])]),u("div",Ou,[u("div",Mu,[u("div",Iu,[u("table",ju,[Lu,u("tbody",Nu,[(H(!0),D(pe,null,Nt(s.users.user_list,r=>(H(),D("tr",{key:r.id},[u("td",Vu,Re(r.id),1),u("td",qu,Re(r.name),1),u("td",Fu,Re(r.email),1),u("td",Uu,[Hu,u("button",{type:"button",class:"text-sm bg-red-500 hover:bg-red-700 text-white py-1 px-2 rounded",onClick:l=>this.users.delete_user(r.id)},[Bu,ue(" | Delete ")],8,Du),Ku,zu])]))),128))])])])])])],64)}const Gu=Be(yu,[["render",Wu]]),Ju={data(){return{needsVueRefresh:{data:!1,keepLooping:!1}}},props:["user","users","messages","dialogue_guide"],methods:{},created(){this.needsVueRefresh.keepLooping=!0},beforeUnmount(){this.needsVueRefresh.keepLooping=!1}},Qu=u("div",{class:"mainContainer"},[u("div",{class:"sectionContainer"})],-1),Zu=[Qu];function Yu(e,t,s,n,o,i){return H(),D("main",null,Zu)}const Ho=Be(Ju,[["render",Yu]]),Xu={props:{user:{type:Object},messages:{type:Object}},data(){return{mfaAuthenticatorCode:""}},methods:{renderQRCode(){console.log("rendering user qr code"),this.user.qr_code_image="data:image/png;base64,"+this.user.mfa_qr_code_base64},async checkMfaCode(){try{await this.user.check_mfa_authenticator_code(this.mfaAuthenticatorCode)?(this.messages.add_message("MFA confirmed, you are now logged in.","success"),this.user.role_name=="client user"?this.$router.push("/questionnaire"):this.user.role_name=="coporate user"?this.$router.push("/manage_jobs"):this.$router.push("/index")):(this.messages.add_message("The code did not authenticate correctly. It may have just missed the time expiry, get a new code and try again","danger"),this.mfaAuthenticatorCode="")}catch(e){console.error("Error in MFA authentication",e)}}}},ed={key:0,class:"card-body mx-3 my-0"},td={class:"row justify-content-center"},sd={class:"col-lg-6 col-md-8"},nd={class:"card border-dark text-center"},od=u("div",{class:"card-header border-dark"},[u("div",{class:"row justify-content-between"},[u("div",{class:"col-8"},[u("p",{class:"card-text"},"Set up Multi-Factor Authentication")]),u("div",{class:"col-4"},[u("a",{class:"btn btn-success btn-sm",target:"_blank",href:"https://vimeo.com/799113927/57039dd5d5",role:"button"},"2 min. explainer video")])])],-1),id={class:"card-body w-full"},rd={class:"row justify-content-center w-full"},ld=["src"],cd=u("p",{class:"card-text"},` It's now a requirement that all systems used within your organisation must be secured with "Multi Factor Authentication" `,-1),ad={key:1,class:"card-text"},ud={key:2,class:"card-text"},dd=u("strong",null,"White Ensign Portal",-1),fd={class:"mt-2"},hd={class:"input-group"},pd=u("span",{class:""},"6 Digit Code",-1);function _d(e,t,s,n,o,i){return s.user.password_authorised&&!s.user.mfa_authorised?(H(),D("div",ed,[u("div",td,[u("div",sd,[u("div",nd,[od,u("div",id,[u("div",rd,[this.user.mfa_secret_confirmed?ce("",!0):(H(),D("img",{key:0,src:s.user.qr_code_image,alt:"QR Code",style:{width:"250px"}},null,8,ld)),cd,this.user.mfa_secret_confirmed?(H(),D("p",ad," If you are unable to find your account on your authenticator app, please email support at support@readiness-tracker.co.uk to get your Multi Factor Authentication reset. ")):ce("",!0),this.user.mfa_secret_confirmed?ce("",!0):(H(),D("p",ud,[ue("Scan this QR Code with the Microsoft or Google Authenticator and enter the 6 digit MFA Authenticator Code for the "),dd,ue(" in the field below ")])),u("div",fd,[u("div",hd,[pd,ae(u("input",{class:"input input-primary",type:"text",id:"mfa_authenticator_code",autocomplete:"off",name:"mfa_authenticator_code","onUpdate:modelValue":t[0]||(t[0]=r=>o.mfaAuthenticatorCode=r),placeholder:"",onKeyup:t[1]||(t[1]=Rc(r=>i.checkMfaCode(),["enter"]))},null,544),[[he,o.mfaAuthenticatorCode]])]),u("button",{type:"button",class:"btn btn-primary my-3",onClick:t[2]||(t[2]=r=>i.checkMfaCode())}," Check authenticator code ")])])])])])])])):ce("",!0)}const gd=Be(Xu,[["render",_d]]);const md={data(){return{needsVueRefresh:{data:!1,keepLooping:!1},mfa_qr_image_rendered:!1,password_visible:!1,data_usage_checked:[]}},components:{MultiFactorAuth:gd},methods:{async loginAPI(){try{await this.user.login(),this.user.mfa_authorised?this.user.role_name=="client user"?this.$router.push("/questionnaire"):this.user.role_name=="coporate user"?this.$router.push("/manage_jobs"):this.$router.push("/index"):this.user.password_authorised&&this.$refs.multiFactorAuthComponent.renderQRCode(),this.user.login_email="",this.user.login_password=""}catch(e){this.user.login_email="",this.user.login_password="",console.error("Login failed:",e)}},vue_refresh_login(){try{this.needsVueRefresh.data="",this.needsVueRefresh.data=this.needsVueRefresh.data+" "+this.user.mfa_authorised,this.needsVueRefresh.data=this.needsVueRefresh.data+" "+this.user.password_authorised,this.needsVueRefresh.data=this.needsVueRefresh.data+" "+this.user.mfa_qr_image_rendered,this.needsVueRefresh.data=this.needsVueRefresh.data+" "+this.user.mfa_authorised,this.needsVueRefresh.data=this.needsVueRefresh.data+" "+this.user.mfa_secret_confirmed,this.needsVueRefresh.data=this.needsVueRefresh.data+" "+this.user.logged_in}catch(e){console.log(e)}this.needsVueRefresh.keepLooping&&setTimeout(this.vue_refresh_login,500)},render_qr_code(){const e=this.user.mfa_qr_image.length,t=this.user.mfa_qr_image[0].length;var s=document.getElementById("qr_code_canvas");s.width=t,s.height=e;var n=s.getContext("2d");n.fillRect(0,0,t,e);var o=n.getImageData(0,0,t,e);const i=o.data;for(var r=0;r<e;r++)for(var l=0;l<t;l++){const c=this.user.mfa_qr_image[r][l];[0,255].includes(c)||console.log(c);const h=r*t*4+l*4;`${i.length}${h}${r}${l}${c}`,i[h]=c,i[h+1]=c,i[h+2]=c,i[h+3]=255}n.putImageData(o,0,0),this.mfa_qr_image_rendered=!0}},props:["users","user","roles","messages"],created(){this.needsVueRefresh.keepLooping=!0,this.vue_refresh_login()},beforeUnmount(){this.needsVueRefresh.keepLooping=!1,clearTimeout(this.login_timeout)},computed:{disabled(){return this.data_usage_checked.length==0||this.user.login_email.length==0||this.user.login_password.length==0}}},Ye=e=>(vi("data-v-e1a70b76"),e=e(),wi(),e),yd={class:"mainContainer flex justify-center items-center min-h-screen"},vd={class:"row w-full"},wd=Ye(()=>u("div",{class:"col-md-2 col-lg-3 col-xl-4"},null,-1)),bd={class:"col-md-8 col-lg-6 col-xl-4"},xd={class:"card px-0"},Cd=Ye(()=>u("div",{class:"text-center"},[u("img",{class:"card-img-top m-4 mt-10",src:Ki,alt:"Logo",style:{width:"90px"}})],-1)),Ed={key:0,class:"card-body m-3 pb-1 mb-0"},Rd={class:"row my-2"},$d={class:"input input-primary flex items-center gap-2"},Sd=Ye(()=>u("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",fill:"currentColor",class:"w-4 h-4 opacity-70"},[u("path",{d:"M2.5 3A1.5 1.5 0 0 0 1 4.5v.793c.026.009.051.02.076.032L7.674 8.51c.206.1.446.1.652 0l6.598-3.185A.755.755 0 0 1 15 5.293V4.5A1.5 1.5 0 0 0 13.5 3h-11Z"}),u("path",{d:"M15 6.954 8.978 9.86a2.25 2.25 0 0 1-1.956 0L1 6.954V11.5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5V6.954Z"})],-1)),kd={class:"flex flex-col items-start space-y-2 mt-5 relative"},Ad={class:"input input-primary w-full flex items-center gap-2 pr-10 relative"},Pd=Ye(()=>u("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",fill:"currentColor",class:"w-4 h-4 opacity-70"},[u("path",{"fill-rule":"evenodd",d:"M14 6a4 4 0 0 1-4.899 3.899l-1.955 1.955a.5.5 0 0 1-.353.146H5v1.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-2.293a.5.5 0 0 1 .146-.353l3.955-3.955A4 4 0 1 1 14 6Zm-4-2a.75.75 0 0 0 0 1.5.5.5 0 0 1 .5.5.75.75 0 0 0 1.5 0 2 2 0 0 0-2-2Z","clip-rule":"evenodd"})],-1)),Td=["type"],Od={class:"row flex flex-row items-center space-x-5 mt-4"},Md={class:"col-12 flex justify-center items-center ml-6"},Id={class:"form-check mr-3"},jd=Ye(()=>u("p",{class:"text-left text-lg mb-0"},[u("label",{for:"data_usage_checked",class:"inline-block"},[u("small",null,[ue("Happy with "),u("a",null,"Data Usage"),ue("?")])])],-1)),Ld={class:"row flex flex-row items-center space-x-5 mt-4"},Nd={class:"flex-grow"},Vd=["disabled"],qd={class:"flex flex-row items-center mt-5"},Fd={class:"col-6 d-grid gap-1 w-full space-x-5 mr-2"},Ud=["disabled"],Hd={class:"col-6 d-grid gap-1 w-full"},Dd={key:1,class:"card-body mx-0 my-0"},Bd={class:""},Kd={class:"w-full"},zd={key:2,class:"card-body m-3 text-center"},Wd=Ye(()=>u("hr",null,null,-1)),Gd=Ye(()=>u("h4",{class:"text-center mt-5"},[u("strong",null,"Data Usage")],-1)),Jd=Ye(()=>u("p",{class:"small"},"By signing in, you confirm that you are happy with our data usage policy. ",-1)),Qd=Ye(()=>u("p",{class:"small"},[u("strong",null," You must keep your password secret and not share it with anyone else")],-1)),Zd=[Wd,Gd,Jd,Qd];function Yd(e,t,s,n,o,i){const r=bt("MultiFactorAuth");return H(),D("div",yd,[u("div",vd,[wd,u("div",bd,[u("div",null,[u("div",xd,[Cd,this.user.password_authorised?ce("",!0):(H(),D("div",Ed,[u("div",Rd,[u("label",$d,[Sd,ae(u("input",{class:"grow",type:"email",id:"email",name:"email",placeholder:"Email","onUpdate:modelValue":t[0]||(t[0]=l=>s.user.login_email=l)},null,512),[[he,s.user.login_email]])])]),u("div",kd,[u("label",Ad,[Pd,ae(u("input",{type:o.password_visible?"text":"password",name:"password",id:"password","onUpdate:modelValue":t[1]||(t[1]=l=>this.user.login_password=l),class:"grow pr-10",placeholder:"Password"},null,8,Td),[[wc,this.user.login_password]])]),u("div",{class:"cursor-pointer absolute inset-y-0 right-0 flex items-center pr-3",onClick:t[2]||(t[2]=l=>o.password_visible=!o.password_visible)},[u("i",{class:He([o.password_visible?"pi pi-eye":"pi pi-eye-slash","text-xl text-gray-500"])},null,2)])]),u("div",Od,[u("div",Md,[u("div",Id,[ae(u("input",{type:"checkbox",checked:"checked",class:"checkbox checkbox-lg border-success checkbox-success rounded-md",id:"data_usage_checked",value:"data_usage_checked","onUpdate:modelValue":t[3]||(t[3]=l=>o.data_usage_checked=l)},null,512),[[Hi,o.data_usage_checked]])]),jd])]),u("div",Ld,[u("div",Nd,[u("button",{onClick:t[4]||(t[4]=l=>this.loginAPI()),disabled:i.disabled,class:He({"w-full border border-primary text-primary bg-transparent hover:bg-primary hover:text-white font-medium rounded-md p-2 transition duration-500":!i.disabled,"w-full border border-neutral text-neutral bg-transparent hover:bg-neutral hover:text-white font-medium rounded-md p-2 transition duration-500":i.disabled})}," Login ",10,Vd)])]),u("div",qd,[u("div",Fd,[u("button",{class:"whitespace-nowrap border border-secondary text-secondary bg-transparent hover:bg-secondary hover:text-white font-medium rounded-md p-2",disabled:this.user.login_email.length==0,onClick:t[5]||(t[5]=l=>this.user.api_reset_password_request(this.user.login_email))}," Password Reset ",8,Ud)]),u("div",Hd,[u("button",{class:"whitespace-nowrap border border-success text-success bg-transparent hover:bg-success hover:text-white font-medium rounded-md p-2",onClick:t[6]||(t[6]=l=>this.$router.push("/register"))}," Register ")])])])),this.user.password_authorised&&!this.user.mfa_authorised?(H(),D("div",Dd,[u("div",Bd,[u("div",Kd,[s.user.password_authorised&&!s.user.mfa_authorised?(H(),jn(r,{key:0,ref:"multiFactorAuthComponent",user:s.user,messages:s.messages},null,8,["user","messages"])):ce("",!0)])])])):ce("",!0),this.user.password_authorised?ce("",!0):(H(),D("div",zd,Zd))])])])])])}const Xd=Be(md,[["render",Yd],["__scopeId","data-v-e1a70b76"]]),ef={name:"PasswordResetView",data(){return{input:{password_reset_token:this.$route.query.password_reset_token,password_1:"",password_2:""}}},methods:{},props:["user","users"]},tf={class:"min-vh-100 d-flex align-items-center"},sf={class:"row w-100"},nf=u("div",{class:"col-md-2 col-lg-3 col-xl-4"},null,-1),of={class:"col-md-8 col-lg-6 col-xl-4"},rf={class:"card my-2 px-0"},lf={class:"card-body"},cf=u("h3",{class:"card-title"},"Password Set / Reset",-1),af={key:0},uf=u("p",{class:"card-text"},"The link you have clicked on is only valid for a short while. If it has timed out, you will get a rejection message and you will need to send another request at the main login page ",-1),df=[uf],ff=ql('<p class="card-text">You are about to set / reset your password.</p><p class="card-text">A password complexity algorithm is in place so choose carefully according to these rules. Your password must:</p><ul><li>be between 8 and 64 characters long</li><li>contain an uppercase character</li><li>contain a lowercase character</li><li>contain a numerical character</li><li>not have more than half the characters as the same character</li><li>not be one of the passwords that are known to be insecure (&quot;password123&quot; for example)</li></ul><p>If your password fails any of these tests, there will be a rejection message.</p><p class="card-text">We recommend using a password manager to choose secure passwords and help you use them in a convenient way.</p>',5),hf={class:"card-text"},pf=u("label",{for:"password",id:"password",class:"form-label"},"Enter new password",-1),_f=u("div",{class:"valid-feedback"},"Strong enough",-1),gf={class:"card-text"},mf=u("label",{for:"password",id:"password",class:"form-label"},"Confirm new password",-1),yf={class:"d-grid gap-1"},vf={class:"d-grid gap-1"},wf=u("div",{class:"col-md-2 col-lg-3 col-xl-4"},null,-1);function bf(e,t,s,n,o,i){const r=bt("router-link");return H(),D("div",tf,[u("div",sf,[nf,u("div",of,[u("div",rf,[u("div",lf,[cf,this.input.password_reset_token>0?(H(),D("div",af,df)):ce("",!0),ff,u("p",hf,[pf,ae(u("input",{class:He(["form-control",this.users.password_valid]),type:"password",name:"password","onUpdate:modelValue":t[0]||(t[0]=l=>o.input.password_1=l),placeholder:"Password",onChange:t[1]||(t[1]=l=>this.users.check_password_valid(this.input.password_1))},null,34),[[he,o.input.password_1]]),_f]),u("p",gf,[mf,ae(u("input",{class:"form-control",type:"password",name:"password","onUpdate:modelValue":t[2]||(t[2]=l=>o.input.password_2=l),placeholder:"Password"},null,512),[[he,o.input.password_2]])]),u("div",yf,[u("button",{type:"button",class:"btn btn-success btn-lg my-1",onClick:t[3]||(t[3]=l=>this.user.api_reset_password(this.input))},"Set / Reset Your Password")]),u("div",vf,[ne(r,{class:"btn btn-primary",to:"/"},{default:mt(()=>[ue("Help & Info")]),_:1})])])])]),wf])])}const xf=Be(ef,[["render",bf]]);const Cf={data(){return{needs_vue_refresh:{data:!1,keep_looping:!1},create_modal_open:!1,edit_modal_open:!1}},methods:{delete_dialogue(e,t){this.dialogue_guide.api_delete_guide(e)===!0&&this.dialogue_guide.dialogue_guides.splice(t,1)},remove_question(e){this.dialogue_guide.new_dialogue.question_set.splice(e,1)},add_dialogue(){this.dialogue_guide.api_create_dialogue_guide(),this.dialogue_guide.get_dialogue_guides_from_api()},vue_refresh(){["super user","ho user","support"].includes(this.user.role_name)&&this.user.logged_in||this.$router.push("login"),this.needs_vue_refresh.keep_looping&&setTimeout(this.vue_refresh,500)},open_modal(e){e=="create"?this.create_modal_open=!0:this.edit_modal_open=!0},close_modal(){this.edit_modal_open=!1,this.create_modal_open=!1},update_dialogue(){this.dialogue_guide.api_update_dialogue_guide()}},props:["users","user","roles","messages","dialogue_guide"],created(){this.needs_vue_refresh.keep_looping=!0,this.vue_refresh(),this.dialogue_guide.get_dialogue_guides_from_api()},beforeUnmount(){this.needs_vue_refresh.keep_looping=!1}},Ef={class:"mainContainer"},Rf={class:"sectionContainer"},$f={class:"two-columns"},Sf=u("h1",{class:"title-medium"},"Manage Dialogues",-1),kf=["open"],Af={class:"modal-box"},Pf=u("h3",{class:"font-bold text-lg"},"Create New Dialogue",-1),Tf={class:"space-y-4"},Of=u("label",{for:"title"},"Title",-1),Mf=u("label",{for:"description"},"Description",-1),If={key:0},jf=u("label",{for:"role",class:"title-small"},"Questions",-1),Lf=["onClick"],Nf=u("h1",{class:"title-small"},"New question",-1),Vf=u("label",null,"Question Text",-1),qf=u("h1",{class:"title-small"},"Points",-1),Ff={class:"two-columns"},Uf=u("button",{type:"submit",class:"btn btn-primary"},"Add Point",-1),Hf={class:"skills-list mt-4"},Df=["onClick"],Bf=u("label",null,"Time Allotted (in seconds)",-1),Kf={class:"modal-action"},zf={class:"modal-action"},Wf=["open"],Gf={class:"modal-box"},Jf=u("h3",{class:"font-bold text-lg"},"Edit Dialogue",-1),Qf=u("label",{for:"title"},"Title",-1),Zf=u("label",{for:"description"},"Description",-1),Yf=u("div",null,[u("label",{for:"role"},"Questions")],-1),Xf=u("div",{class:"modal-action"},[u("button",{type:"submit",class:"btn btn-primary"},"Save")],-1),eh={class:"modal-action"},th={class:"mt-8 flex justify-center"},sh={class:"flex flex-wrap justify-center"},nh={class:"overflow-x-auto rounded-lg"},oh={class:"table table-zebra min-w-max mx-auto rounded-lg"},ih=u("thead",{class:"bg-primary text-gray-300"},[u("tr",null,[u("th",{scope:"col",class:"th"},"Title"),u("th",{scope:"col",class:"th"},"Description"),u("th",{scope:"col",class:"th"},"# of Questions"),u("th",{scope:"col",class:"th"})])],-1),rh={class:"bg-white divide-y divide-gray-200"},lh={class:"td"},ch={class:"td"},ah={class:"td"},uh={class:"td"},dh=["onClick"],fh=["onClick"];function hh(e,t,s,n,o,i){return H(),D("div",Ef,[o.create_modal_open||o.edit_modal_open?(H(),D("div",{key:0,class:"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-40",onClick:t[0]||(t[0]=(...r)=>i.close_modal&&i.close_modal(...r))})):ce("",!0),u("div",Rf,[u("div",$f,[Sf,u("button",{class:"btn btn-primary mb-4",onClick:t[1]||(t[1]=r=>i.open_modal("create"))},"Create")]),u("dialog",{id:"my_modal_1",class:"modal",open:o.create_modal_open},[u("div",Af,[Pf,u("div",Tf,[u("div",null,[Of,ae(u("input",{type:"text",id:"title",class:"input input-primary","onUpdate:modelValue":t[2]||(t[2]=r=>s.dialogue_guide.new_dialogue.title=r)},null,512),[[he,s.dialogue_guide.new_dialogue.title]])]),u("div",null,[Mf,ae(u("input",{type:"text",id:"description",class:"input input-primary","onUpdate:modelValue":t[3]||(t[3]=r=>s.dialogue_guide.new_dialogue.description=r)},null,512),[[he,s.dialogue_guide.new_dialogue.description]])]),s.dialogue_guide.new_dialogue.question_set.length>0?(H(),D("div",If,[jf,u("ul",null,[(H(!0),D(pe,null,Nt(s.dialogue_guide.new_dialogue.question_set,(r,l)=>(H(),D("li",{key:l,class:"two-columns"},[u("p",null,Re(r.text),1),u("button",{class:"btn btn-secondary btn-sm",onClick:c=>i.remove_question(l)},"Delete",8,Lf)]))),128))])])):ce("",!0),u("div",null,[Nf,u("div",null,[Vf,ae(u("input",{type:"text","onUpdate:modelValue":t[4]||(t[4]=r=>s.dialogue_guide.new_question.text=r),class:"input input-primary w-full"},null,512),[[he,s.dialogue_guide.new_question.text]])]),u("div",null,[qf,u("form",{onSubmit:t[6]||(t[6]=Eo((...r)=>s.dialogue_guide.add_point&&s.dialogue_guide.add_point(...r),["prevent"]))},[u("div",Ff,[ae(u("input",{type:"text","onUpdate:modelValue":t[5]||(t[5]=r=>s.dialogue_guide.new_point=r),placeholder:"Add a new point",class:"input input-primary w-full"},null,512),[[he,s.dialogue_guide.new_point]]),Uf])],32),u("div",Hf,[(H(!0),D(pe,null,Nt(s.dialogue_guide.new_question.points,(r,l)=>(H(),D("div",{key:l,class:"flex justify-between items-center mb-2"},[u("span",null,Re(r),1),u("button",{onClick:c=>s.dialogue_guide.remove_point(l),class:"btn btn-secondary btn-sm"},"Remove",8,Df)]))),128))])]),u("div",null,[Bf,ae(u("input",{type:"number","onUpdate:modelValue":t[7]||(t[7]=r=>s.dialogue_guide.new_question.time_allotted=r),class:"input input-primary w-full"},null,512),[[he,s.dialogue_guide.new_question.time_allotted]])])]),u("button",{type:"button",onClick:t[8]||(t[8]=r=>s.dialogue_guide.add_question()),class:"btn btn-primary"},"Add New Question"),u("div",Kf,[u("button",{type:"submit",class:"btn btn-primary",onClick:t[9]||(t[9]=r=>{i.add_dialogue(),i.close_modal()})},"Create dialogue")])]),u("div",zf,[u("button",{type:"button",class:"btn btn-secondary",onClick:t[10]||(t[10]=(...r)=>i.close_modal&&i.close_modal(...r))},"Close")])])],8,kf),u("dialog",{id:"my_modal_2",class:"modal",open:o.edit_modal_open},[u("div",Gf,[Jf,u("form",{class:"space-y-4",onSubmit:t[13]||(t[13]=Eo(r=>{i.update_dialogue(),i.close_modal()},["prevent"]))},[u("div",null,[Qf,ae(u("input",{type:"text",id:"title",class:"input input-primary","onUpdate:modelValue":t[11]||(t[11]=r=>s.dialogue_guide.dialogue_to_edit.title=r)},null,512),[[he,s.dialogue_guide.dialogue_to_edit.title]])]),u("div",null,[Zf,ae(u("input",{type:"text",id:"description",class:"input input-primary","onUpdate:modelValue":t[12]||(t[12]=r=>s.dialogue_guide.dialogue_to_edit.description=r)},null,512),[[he,s.dialogue_guide.dialogue_to_edit.description]])]),Yf,Xf],32),u("div",eh,[u("button",{type:"button",class:"btn btn-secondary",onClick:t[14]||(t[14]=(...r)=>i.close_modal&&i.close_modal(...r))},"Close")])])],8,Wf),u("div",th,[u("div",sh,[u("div",nh,[u("table",oh,[ih,u("tbody",rh,[(H(!0),D(pe,null,Nt(s.dialogue_guide.dialogue_guides,(r,l)=>(H(),D("tr",{key:r.id,class:"hover"},[u("td",lh,Re(r.title),1),u("td",ch,Re(r.description),1),u("td",ah,Re(r.questions.length),1),u("td",uh,[u("button",{type:"button",class:"btn btn-success",onClick:c=>{s.dialogue_guide.dialogue_to_edit=r,i.open_modal("edit")}},"Edit",8,dh),u("button",{type:"button",class:"btn btn-secondary ml-2",onClick:c=>i.delete_dialogue(r.id,l)},"Delete",8,fh)])]))),128))])]),u("button",{class:"btn btn-primary mb-4 mt-5",onClick:t[15]||(t[15]=r=>s.dialogue_guide.get_dialogue_guides_from_api())},"Refresh ")])])])])])}const ph=Be(Cf,[["render",hh]]);const _h={props:["messages","transcript"],data(){return{need_vue_refresh:{data:!1,keepLooping:!1},domainOrigin:window.location.origin}},methods:{vueRefresh(){try{this.need_vue_refresh.data=""}catch{}this.need_vue_refresh.keepLooping&&setTimeout(this.vueRefresh,500)}},mounted(){this.need_vue_refresh.keepLooping=!0,this.vueRefresh()},beforeUnmount(){this.need_vue_refresh.keepLooping=!1}},Bs=e=>(vi("data-v-51fce887"),e=e(),wi(),e),gh={class:"mainContainer"},mh={class:"sectionContainer"},yh=Bs(()=>u("h1",{class:"title-medium"},"Ask a question",-1)),vh=Bs(()=>u("label",{class:"title-small"}," Query: ",-1)),wh={class:"col-md-7"},bh={class:"row"},xh={class:"col-2"},Ch={key:0,class:"mt-2"},Eh={key:1,class:""},Rh=Bs(()=>u("h5",{class:"title-small"},"Answer:",-1)),$h={class:"preserve-newlines"},Sh={class:"mt-2"},kh=Bs(()=>u("h5",{class:"title-small"},"Transcripts:",-1)),Ah={class:"row"},Ph=["id"],Th={class:"mb-0"},Oh={class:"row"},Mh={class:"col-5"},Ih={class:"row"},jh=["id","aria-labelledby"],Lh={class:"card-body",style:{"white-space":"pre-line"}};function Nh(e,t,s,n,o,i){return H(),D("div",gh,[u("div",mh,[yh,vh,u("div",wh,[ae(u("input",{type:"text",class:"input input-primary","onUpdate:modelValue":t[0]||(t[0]=r=>s.transcript.user_question=r),id:"question",required:"","aria-label":"Type a question here."},null,512),[[he,s.transcript.user_question]])]),u("div",bh,[u("div",xh,[u("button",{class:"btn btn-primary",type:"button",onClick:t[1]||(t[1]=r=>{s.transcript.ask_question(),s.transcript.awaiting_response=!0,s.transcript.response=!1})}," Submit")])]),s.transcript.awaiting_response?(H(),D("div",Ch,Re(s.transcript.message),1)):ce("",!0),s.transcript.response?(H(),D("div",Eh,[u("div",null,[Rh,u("p",$h,Re(s.transcript.response),1)]),u("div",Sh,[kh,(H(!0),D(pe,null,Nt(s.transcript.documents,(r,l)=>(H(),D("div",{key:l},[u("div",Ah,[u("div",{class:"card-header col-10",id:r.transcription_id},[u("h5",Th,[u("div",Oh,[u("div",Mh,"Source ID: "+Re(r.transcription_id),1)])])],8,Ph)]),u("div",Ih,[u("div",{id:"S"+l,class:"collapse","aria-labelledby":l,"data-parent":"#accordion"},[u("div",Lh,Re(r.text),1)],8,jh)])]))),128))])])):ce("",!0)])])}const Vh=Be(_h,[["render",Nh],["__scopeId","data-v-51fce887"]]),qh=gu({history:Ka("./"),routes:[{path:"/",name:"home",component:Ho},{path:"/index",name:"index",component:Ho},{path:"/crud",name:"crud",component:Gu},{path:"/login",name:"login",component:Xd},{path:"/dialogue",name:"dialogue",component:ph},{path:"/passwordresetview",name:"passwordreset",component:xf},{path:"/transcript_search",name:"transcript_search",component:Vh}]});const nr=kc(pa);nr.use(qh);nr.mount("#app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
